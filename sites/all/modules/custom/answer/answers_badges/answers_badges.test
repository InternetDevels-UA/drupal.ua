<?php
// $Id$

include_once drupal_get_path('module', 'answers_badges') .'/answers_badges_test.inc';


class Answers_badgesTestCase extends ExtendedDrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Answer_badges',
      'description' => 'Test Answer badges.',
      'group' => 'Answer_badges',
    );
  }

  /**
   * Initializations.
   */
  public function setUp() {
    $this->users_profile = array();
    $this->users_badges = array();
    
    /*
    $args = func_get_args();
    $modules = array_merge(array(
      'menu', 'node', 'comment', 'taxonomy', 'content', 'imagecache', 'ctools', 'content_profile',
    'text', 'imagefield', 'votingapi',
      'content_taxonomy', 'commentreference', 'answers', 'answers_badges'
    ), $args);
    call_user_func_array(array('parent', 'setUp'), $modules);
    */
    parent::setUp();
    
    //FIX — update table, add fields.
    db_query("DROP TABLE IF EXISTS {flags}");
    db_query("CREATE TABLE IF NOT EXISTS {flags} (
  `fid` smallint(5) unsigned NOT NULL AUTO_INCREMENT,
  `content_type` varchar(32) NOT NULL DEFAULT '',
  `name` varchar(32) DEFAULT '',
  `title` varchar(255) DEFAULT '',
  `global` tinyint(4) DEFAULT '0',
  `options` text,
  PRIMARY KEY (`fid`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=3");
    
    db_query("INSERT INTO {flags} (`fid`, `content_type`, `name`, `title`, `global`, `options`) VALUES
(1, 'node', 'bookmarks', 'Закладки', 0, 'a:14:". '{s:10:"flag_short";s:32:"Додати в Закладки";s:9:"flag_long";s:43:"Додати пост до Закладок";s:12:"flag_message";s:63:"Цей пост доданий до ваших Закладок";s:12:"unflag_short";s:38:"Виключити з Закладок";s:11:"unflag_long";s:63:"Вилучити цей пост з ваших Закладок";s:14:"unflag_message";s:72:"Цей пост був вилучиний з ваших Закладок";s:18:"unflag_denied_text";s:0:"";s:9:"link_type";s:6:"normal";s:5:"roles";a:2:{s:4:"flag";a:2:{i:0;i:2;i:1;i:3;}s:6:"unflag";a:2:{i:0;i:2;i:1;i:3;}}s:12:"show_on_page";i:1;s:14:"show_on_teaser";i:1;s:12:"show_on_form";i:0;s:13:"access_author";s:0:"";s:4:"i18n";i:0;}'. "'),
(2, 'comment', 'best_answer', 'Best Answer', 0, 'a:11:" . '{s:10:"flag_short";s:14:"+ Best Answer!";s:9:"flag_long";s:0:"";s:12:"flag_message";s:0:"";s:12:"unflag_short";s:13:"- Best Answer";s:11:"unflag_long";s:0:"";s:14:"unflag_message";s:0:"";s:18:"unflag_denied_text";s:0:"";s:9:"link_type";s:6:"toggle";s:5:"roles";a:2:{s:4:"flag";a:2:{i:0;i:2;i:1;i:3;}s:6:"unflag";a:2:{i:0;i:2;i:1;i:3;}}s:13:"access_author";s:8:"node_own";s:15:"show_on_comment";i:1;}' . "')");
    
    
    db_query("DROP TABLE IF EXISTS {content_type_profile}");
    db_query("CREATE TABLE IF NOT EXISTS {content_type_profile} (
  `vid` int(10) unsigned NOT NULL DEFAULT '0',
  `nid` int(10) unsigned NOT NULL DEFAULT '0',
  `field_image_fid` int(11) DEFAULT NULL,
  `field_image_list` tinyint(4) DEFAULT NULL,
  `field_image_data` text,
  `field_first_name_value` varchar(60) DEFAULT NULL,
  `field_last_name_value` varchar(60) DEFAULT NULL,
  `field_gender_value` longtext,
  `field_skype_value` longtext,
  `field_jabber_value` longtext,
  `field_icq_value` longtext,
  `field_show_email_value` longtext,
  `field_phone_value` longtext,
  `field_location_lid` int(10) unsigned DEFAULT NULL,
  `field_drupal_org_value` longtext,
  `field_drupal_ru_value` longtext,
  `field_personal_website_value` longtext,
  `field_social_value` longtext,
  `field_bio_value` longtext,
  `field_bio_format` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`vid`),
  KEY `nid` (`nid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8");

  db_query("INSERT INTO {content_type_profile} (`vid`, `nid`, `field_image_fid`, `field_image_list`, `field_image_data`, `field_first_name_value`, `field_last_name_value`, `field_gender_value`, `field_skype_value`, `field_jabber_value`, `field_icq_value`, `field_show_email_value`, `field_phone_value`, `field_location_lid`, `field_drupal_org_value`, `field_drupal_ru_value`, `field_personal_website_value`, `field_social_value`, `field_bio_value`, `field_bio_format`) VALUES
(6, 6, 17, 1, 'a:2:{s:3:\"alt\";s:0:\"\";s:5:\"title\";s:0:\"\";}', 'Alexandr', 'Shvets', 'I''m a boy', 'neo.chief', 'neochief@shvetsgroup.com', '300838008', '0', '+380976833155', 2, 'http://drupal.org/user/233667', 'http://www.drupal.ru/username/neochief', 'http://ShvetsGroup.com/\r\nhttp://DrupalDance.com/', 'http://www.linkedin.com/in/neochief\r\nhttp://www.twitter.com/neochief', 'Друпал-ніндзя, засновник веб-студії ShvetsGroup.', 1),
(9, 9, NULL, NULL, NULL, 'Вячеслав', 'Жуков', 'I''m a boy', NULL, NULL, NULL, NULL, NULL, 3, NULL, NULL, NULL, NULL, NULL, NULL),
(75, 75, 13, 1, 'a:2:{s:3:\"alt\";s:0:\"\";s:5:\"title\";s:0:\"\";}', 'Ігор', 'Броновський', 'I''m a boy', 'brun4u', 'brun.if', '266816002', '0', NULL, 9, 'http://drupal.org/user/398393', 'http://drupal.ru/username/brun', 'http://brun.if.ua/', 'http://vkontakte.ru/brunif\r\nhttp://twitter.com/BrunIF', 'PHP developer \r\n<a href=\"http://brun.if.ua/about\" target=\"_blank\">Детальніще про мене</a>', 1),
(89, 89, 28, NULL, 'b:0;', 'Andriy', 'Podanenko', NULL, NULL, NULL, NULL, NULL, NULL, 23, 'http://drupal.org/user/116002', NULL, 'http://my.ukrweb.info/tag/vebdizain/cms/drupal\r\n', NULL, 'Business owner http://www.linkedin.com/in/podarok', NULL),
(164, 164, 12, NULL, NULL, 'Ruslan', 'R', NULL, NULL, NULL, NULL, NULL, NULL, 98, NULL, NULL, 'http://www.ehata.com.ua/', NULL, 'Business owner ', NULL),
(553, 553, 957, 1, 'a:2:{s:3:\"alt\";s:0:\"\";s:5:\"title\";s:0:\"\";}', 'orb', 'not', 'I''m a boy', 'holyorb2', NULL, NULL, '0', NULL, 487, 'http://drupal.org/user/244284', 'http://drupal.ru/user/orb', NULL, NULL, 'Webmaster ', 1),
(1124, 1124, 1061, 1, 'a:3:{s:11:\"description\";s:0:\"\";s:3:\"alt\";s:0:\"\";s:5:\"title\";s:0:\"\";}', 'Івана', 'Макаренко', 'I''m a girl', NULL, NULL, NULL, '0', NULL, 878, NULL, NULL, NULL, NULL, NULL, NULL),
(1194, 1194, NULL, NULL, NULL, 'Павел', 'Ковалев', 'I''m a boy', NULL, NULL, '7266061', '0', NULL, 889, NULL, 'http://www.drupal.ru/username/klew', 'http://klew.dp.ua', NULL, NULL, NULL),
(1216, 1212, NULL, NULL, NULL, 'test33', 'test33', 'I''m a boy', NULL, NULL, NULL, NULL, NULL, 894, NULL, NULL, NULL, NULL, NULL, NULL)");
  }
  
  
  /**
   * Run Simpletest.
   */
  public function testIndexContentType() {
		/*
    1 - neochief, super admin
    9 - Brun
    23 - podarok, admin
    100 - rus
    496 - orb, admin
    1212 - iva
    1297 - Artu
    1302 - klew
    1315 - psn
    1324 - Merlin
    1325 - test33
    */
    /*
     * Create node user=496.
     */
    $account_496 = user_load(array('uid' => 496));
    $account_496->pass_raw = 'test';
    $this->drupalLogin($account_496);

    $node_array = array(
     'type' => 'question',
     'title' => 'First question, Tumbleweed',
     'body' => 'Text question 1, Author orb.
     Tumbleweed — Asked a question with no votes, no answers, no comments,
     and low views for a week (5 views). (Tumbleweed = FALSE)',
      'created' => (time() - 604801),  //604801 = 7 * 24 *60 * 60 + 1
    );
    $node_496_1 = $this->drupalCreateNode($node_array);
    $this->assertEqual(count($this->users_badges[$account_496->uid]), 0, 'Badge not create.', 'Badges');
    if (count($this->users_badges[$account_496->uid])) {
      $this->pass($this->checkBadges(496));
    }
    $this->drupalLogout();
    
    /*
     * Create users.
     * Create nodes.
     */
    $account_1297 = user_load(array('uid' => 1297));
    $account_1297->pass_raw = 'test';
    
    $account_100 = user_load(array('uid' => 100));
    $account_100->pass_raw = 'test';
    $this->drupalLogin($account_100);
    $node_array = array(
     'type' => 'question',
     'title' => 'Node for Tumbleweed',
     'body' => 'Tumbleweed — Asked a question with no votes, no answers, no comments,
     and low views for a week (5 views). (Tumbleweed = TRUE)',
      'created' => (time() - 604801),  //604801 = 7 * 24 *60 * 60 + 1
    );
    $node_100_1 = $this->drupalCreateNode($node_array);
    
    $account_1212 = user_load(array('uid' => 1212));
    $account_1212->pass_raw = 'test';
    $this->drupalLogout();
    $this->drupalLogin($account_1212);
    $node_array = array(
     'type' => 'question',
     'title' => 'Node for Tumbleweed',
     'body' => 'Tumbleweed — Asked a question with no votes, no answers, no comments,
     and low views for a week (5 views). (Tumbleweed = FALSE)',
    'created' => (time() - 518400),  //518400 = 6 * 24 *60 * 60
    );
    $node_1212_1 = $this->drupalCreateNode($node_array);
    
    $account_23 = user_load(array('uid' => 23));
    $account_23->pass_raw = 'test';
    $this->drupalLogout();
    $this->drupalLogin($account_23);
    $node_array = array(
     'type' => 'question',
     'title' => 'Node for Tumbleweed',
     'body' => 'Tumbleweed — Asked a question with no votes, no answers, no comments,
     and low views for a week (5 views). (Tumbleweed = FALSE)',
      'created' => (time() - 604801),  //604801 = 7 * 24 *60 * 60 + 1
    );
    $node_23_1 = $this->drupalCreateNode($node_array);
    $output = $this->drupalGet('node/'. $node_23_1->nid);
    $this->clickVoteUpDown();
    
    $account_9 = user_load(array('uid' => 9));
    $account_9->pass_raw = 'test';
    $this->drupalLogout();
    $this->drupalLogin($account_9);
    
    $node_array = array(
     'type' => 'question',
     'title' => 'Node for Tumbleweed, Civic Duty, Electorate, Sportsmanship, Favorite Question, Scholar',
     'body' => 'Text Comment 2, author Brun
     Tumbleweed — Asked a question with no votes, no answers, no comments,
     and low views for a week (5 views). (Tumbleweed = FALSE).
     Favorite Question — Question favorited by 25 users.
     Scholar — Asked a question and accepted an answer.',
      'created' => (time() - 604801),  //604801 = 7 * 24 *60 * 60 + 1
    );
    $node_9_1 = $this->drupalCreateNode($node_array);
    
    $node_array = array(
     'type' => 'question',
     'title' => 'Node for Disciplined (delete)',
     'body' => 'Badge: Disciplined — Deleted own post with score of 3 or higher.',
    );
    $node_9_2 = $this->drupalCreateNode($node_array);
    
    $node_array = array(
     'type' => 'question',
     'title' => 'Node for Peer Pressure (delete)',
     'body' => 'Badge: Peer Pressure — Deleted own post with score of -3 or lower.',
    );
    $node_9_3 = $this->drupalCreateNode($node_array);
    
    $node_array = array(
     'type' => 'question',
     'title' => 'Node for Nice Question + Nice Answer + Suffrage + Stellar Question',
     'body' => 'Badge: Nice Question — Question score of 10 or more.
     Nice Answer — Answer score of 10 or more.
     Suffrage — Used all 30 votes in a day.
     Stellar Question — Question favorited by 100 users.',
    );
    $node_9_4 = $this->drupalCreateNode($node_array);
    
    $node_array = array(
     'type' => 'question',
     'title' => 'Node for Revival, Nice Answer, Nice Question',
     'body' => 'Badge: Revival — Answered more than 30 days later.
     Nice Answer — Answer score of 10 or more.
     Nice Question — Question score of 10 or more.',
    );
    $node_9_5 = $this->drupalCreateNode($node_array);
    
    $node_array = array(
     'type' => 'question',
     'title' => 'Good Question + Good Answer + Guru',
     'body' => 'Badge: Good Answer — Answer score of 25 or more.
     Good Question — Question score of 25 or more.',
    );
    $node_9_6 = $this->drupalCreateNode($node_array);
    
    $node_array = array(
     'type' => 'question',
     'title' => 'Great Question + Great Answer',
     'body' => 'Badge: Great Answer — Answer score of 100 or more.
     Great Question — Question score of 100 or more.',
    );
    $node_9_7 = $this->drupalCreateNode($node_array);
    
    $node_array = array(
     'type' => 'question',
     'title' => 'Enlightened, Guru',
     'body' => 'Enlightened — First answer was accepted with score of 10 or more.
     Guru — Accepted answer and score of 40 or more.',
    );
    $node_9_8 = $this->drupalCreateNode($node_array);
    
    $node_array = array(
     'type' => 'question',
     'title' => 'Necromancer, Populist',
     'body' => 'Necromancer — Answered a question more than 60 days later with score of 5 or more.
     Populist — Answer outscored an accepted answer with score of more than 10 by more than 2x.',
    );
    $node_9_9 = $this->drupalCreateNode($node_array);
    
    $this->pass($this->checkBadges($account_9->uid));
    $this->assertEqual(count($this->users_badges[$account_9->uid]), 0, 'Create node.
    	Badge not create.', 'Badges');
    
    /*
     * Badge: Tumbleweed — Asked a question with no votes, no answers,
     * 				no comments, and low views for a week (5 views).
     * Badge: Popular Question — Asked a question with 1,000 views.
     */
    $edit = array(
     'comment' => 'Answer 1',
    );
    $this->drupalPost('comment/reply/'. $node_496_1->nid, $edit, t('Save'));

    db_query("UPDATE {node_counter} SET totalcount = 999, daycount = 999,
      timestamp = %d WHERE nid = %d LIMIT 1", time(), $node_9_1->nid);
    if (!db_affected_rows()) {
      db_query('INSERT INTO {node_counter} (nid, daycount, totalcount, timestamp)
      	VALUES (%d, 999, 999, %d)', $node_9_1->nid, time());
    }
    $output = $this->drupalGet('');
    $this->cronRun();
    $this->pass($this->checkBadges($account_9->uid));
    $this->assertFalse(array_key_exists(BADGE_POPULAR_QUESTION, $this->users_badges[$account_9->uid]),
    	'Badge "Popular Question" is not set.', 'Badge');
    $output = $this->drupalGet('node/'. $node_9_1->nid);
    $this->assertRaw('<span>999 reads</span>', 'Node is 999 views.');
    
    $this->assertFalse(array_key_exists(BADGE_TUMBLEWEED, $this->users_badges[$account_9->uid]),
    	'Badge "Tumbleweed" is not set.', 'Badge');
    
    $this->pass($this->checkBadges($account_100->uid));
    $this->assertTrue(array_key_exists(BADGE_TUMBLEWEED, $this->users_badges[$account_100->uid]),
    	'Badge "Tumbleweed" is set.', 'Badge');
    
    $this->pass($this->checkBadges($account_1212->uid));
    $this->assertFalse(array_key_exists(BADGE_TUMBLEWEED, $this->users_badges[$account_1212->uid]),
    	'Badge "Tumbleweed" is not set.', 'Badge');
    
    $this->pass($this->checkBadges($account_496->uid));
    $this->assertFalse(array_key_exists(BADGE_TUMBLEWEED, $this->users_badges[$account_496->uid]),
    	'Badge "Tumbleweed" is not set.', 'Badge');
    
    $this->pass($this->checkBadges($account_23->uid));
    $this->assertFalse(array_key_exists(BADGE_TUMBLEWEED, $this->users_badges[$account_23->uid]),
    	'Badge "Tumbleweed" is not set.', 'Badge');
    
    
    $output = $this->drupalGet('node/'. $node_9_1->nid);
    $this->cronRun();
    $this->pass($this->checkBadges());
    $this->assertTrue(array_key_exists(BADGE_POPULAR_QUESTION, $this->users_badges[$account_9->uid]),
    	'Badge Popular Question is set.', 'Badge');
    //*/
    
    
    /*
     * Badge: Notable Question — Asked a question with 2,500 views.
     */
    db_query("UPDATE {node_counter} SET totalcount = 2499, daycount = 2499,
      timestamp = %d WHERE nid = %d LIMIT 1", time(), $node_9_2->nid);
    if (!db_affected_rows()) {
      db_query('INSERT INTO {node_counter} (nid, daycount, totalcount, timestamp)
      	VALUES (%d, 2499, 2499, %d)', $node_9_2->nid, time());
    }
    $this->cronRun();
    $this->pass($this->checkBadges());
    $this->assertFalse(array_key_exists(BADGE_NOTABLE_QUESTION, $this->users_badges[$account_9->uid]),
    	'Badge Notable Question is not set.', 'Badge');
    $output = $this->drupalGet('node/'. $node_9_2->nid);
    $this->assertRaw('<span>2499 reads</span>', 'Node is 2499 views.');
    $output = $this->drupalGet('node/'. $node_9_2->nid);
    $this->cronRun();
    $this->pass($this->checkBadges());
    $this->assertTrue(array_key_exists(BADGE_NOTABLE_QUESTION, $this->users_badges[$account_9->uid]),
    	'Badge Notable Question is not set.', 'Badge');
    //*/
    
    
    /*
     * Badge: Famous Question — Asked a question with 10,000 views.
     * Badge: Enthusiast — Visited the site each day for 30 consecutive days.
     * Badge: Fanatic — Visited the site each day for 100 consecutive days.
     */
    db_query("UPDATE {node_counter} SET totalcount = 9999, daycount = 9999,
      timestamp = %d WHERE nid = %d LIMIT 1", time(), $node_9_3->nid);
    if (!db_affected_rows()) {
      db_query('INSERT INTO {node_counter} (nid, daycount, totalcount, timestamp)
      	VALUES (%d, 9999, 9999, %d)', $node_9_3->nid, time());
    }
    
    $this->setupOnLine($account_100->uid, 29);
    $this->setupOnLine($account_9->uid,30);
    $this->setupOnLine($account_1212->uid, 99);
    $this->setupOnLine($account_23->uid, 100);
    $this->cronRun();
    
    $this->pass($this->checkBadges($account_100->uid));
    $this->assertFalse(array_key_exists(BADGE_ENTHUSIAST, $this->users_badges[$account_100->uid]),
    	'Badge "Enthusiast" is not set.', 'Badge');
    $this->pass($this->checkBadges($account_1212->uid));
    $this->assertFalse(array_key_exists(BADGE_FANATIC, $this->users_badges[$account_1212->uid]),
    	'Badge "Fanatic" is not set.', 'Badge');
    
    $this->pass($this->checkBadges($account_23->uid));
    $this->assertTrue(array_key_exists(BADGE_FANATIC, $this->users_badges[$account_23->uid]),
    	'Badge "Fanatic" is set.', 'Badge');
    $this->pass($this->checkBadges($account_9->uid));
    $this->assertTrue(array_key_exists(BADGE_ENTHUSIAST, $this->users_badges[$account_9->uid]),
    	'Badge "Enthusiast" is set.', 'Badge');
    
    $this->assertFalse(array_key_exists(BADGE_FAMOUS_QUESTION, $this->users_badges[$account_9->uid]),
    	'Badge "Famous Question" is not set.', 'Badge');
    $output = $this->drupalGet('node/'. $node_9_3->nid);
    $this->assertRaw('<span>9999 reads</span>', 'Node is 9999 views.');
    $output = $this->drupalGet('node/'. $node_9_3->nid);
    $this->cronRun();
    $this->pass($this->checkBadges());
    $this->assertTrue(array_key_exists(BADGE_FAMOUS_QUESTION, $this->users_badges[$account_9->uid]),
    	'Badge "Famous Question" is not set.', 'Badge');
    //*/
    
    /*
     * Badge: Answerer — Left 10 answers
     */
    $node_496_1_first_cid = $this->loadComments($node_496_1->nid);
    $node_496_1_first_cid = $node_496_1_first_cid[0]->cid;
    for ($i = 2; $i < 10; $i++) {
      $edit = array(
       'comment' => 'Answer '. $i,
      );
      $this->drupalPost('comment/reply/'. $node_496_1->nid, $edit, t('Save'));
    }
    
    $this->pass($this->checkBadges());
    $this->assertFalse(array_key_exists(BADGE_ANSWERER, $this->users_badges[$account_9->uid]),
    	'Badge "Answerer" is not set.', 'Badge');
    
    $edit = array(
       'comment' => 'Answer 10',
      );
    $this->drupalPost('comment/reply/'. $node_496_1->nid, $edit, t('Save'));
    $this->pass($this->checkBadges());
    $this->assertTrue(array_key_exists(BADGE_ANSWERER, $this->users_badges[$account_9->uid]),
    	'Badge Answerer is set.', 'Badge');
    //*/
    
    /*
     * Badge: Commentator — Left 10 comments
     */
    for ($i = 1; $i < 10; $i++) {
      $edit = array(
       'comment' => 'Comment '. $i,
      );
      $this->drupalPost(
      	'comment/reply/'. $node_496_1->nid .'/'. $node_496_1_first_cid, $edit,
        t('Save'));
    }
    $this->pass($this->checkBadges());
    $this->assertFalse(array_key_exists(BADGE_COMMENTATOR, $this->users_badges[$account_9->uid]),
    	'Badge Commentator is not set.', 'Badge');
    $edit = array(
       'comment' => 'Comment 10',
      );
    $this->drupalPost(
    	'comment/reply/'. $node_496_1->nid .'/'. $node_496_1_first_cid, $edit,
      t('Save'));
    $this->pass($this->checkBadges());
    $this->assertTrue(array_key_exists(BADGE_COMMENTATOR, $this->users_badges[$account_9->uid]),
    	'Badge Commentator is set.', 'Badge');
    //*/
    
    
    /*
     * Badge: Student — Asked first question with at least one up vote.
     */
    $output = $this->drupalGet('node/'. $node_9_1->nid);
    $this->assertFalse(array_key_exists(BADGE_SUPPORTER, $this->users_badges[$account_9->uid]),
    	'Badge Supporter is not set.', 'Badge');
    $this->clickVoteUpDown();
    $this->pass($this->checkBadges());
    $this->assertTrue(array_key_exists(BADGE_SUPPORTER, $this->users_badges[$account_9->uid]),
    	'Badge Supporter is set.', 'Badge');
    //*/
    

    /*
     * Badge: Critic — First down vote
     */
    $output = $this->drupalGet('node/'. $node_9_1->nid);
    $this->assertFalse(array_key_exists(BADGE_CRITIC, $this->users_badges[$account_9->uid]),
    	'Badge Critic is not set.', 'Badge');
    $this->clickVoteUpDown('down');
    $this->pass($this->checkBadges());
    $this->assertTrue(array_key_exists(BADGE_CRITIC, $this->users_badges[$account_9->uid]),
    	'Badge Critic is set.', 'Badge');
    //*/
    
    
    /*
     * Badge: Student — Asked first question with at least one up vote.
     */
    $output = $this->drupalGet('node/'. $node_496_1->nid);
    $this->clickVoteUpDown();
    $this->pass($this->checkBadges($account_496->uid));
    $this->assertTrue(array_key_exists(BADGE_STUDENT, $this->users_badges[$account_496->uid]),
    	'Badge Student is set.', 'Badge');
    //*/
    
    
    /*
     * Badge: Teacher — Answered first question with score of 1 or more.
     */
    $this->drupalLogout();
    $this->drupalLogin($account_1212);
    $this->pass($this->checkBadges());
    $this->assertFalse(array_key_exists(BADGE_TEACHER, $this->users_badges[$account_1212->uid]),
    	'Badge "Teacher" is not set.', 'Badge');
    $output = $this->drupalGet('node/'. $node_9_2->nid);
    $this->clickVoteUpDown();
    $edit = array(
     'comment' => 'Answer for Badge "Teacher".',
    );
    $this->drupalPost('comment/reply/'. $node_9_2->nid, $edit, t('Save'));
    $this->pass($this->checkBadges());
    $this->assertTrue(array_key_exists(BADGE_TEACHER, $this->users_badges[$account_1212->uid]),
    	'Badge "Teacher" is set.', 'Badge');
    //*/
    
    /*
     * Badge: Disciplined — Deleted own post with score of 3 or higher.
     * Badge: Peer Pressure — Deleted own post with score of -3 or lower.
     */
    $this->drupalLogout();
    $this->drupalLogin($account_100);
    $output = $this->drupalGet('node/'. $node_9_2->nid);
    $this->clickVoteUpDown();
    $output = $this->drupalGet('node/'. $node_9_3->nid);
    $this->clickVoteUpDown('down');
    $this->drupalLogout();
    
    $this->drupalLogin($account_496);
    $output = $this->drupalGet('node/'. $node_9_3->nid);
    $this->clickVoteUpDown('down');
    $this->drupalLogout();
    
    $this->drupalLogin($account_9);
    $output = $this->drupalGet('node/'. $node_9_2->nid);
    $this->clickVoteUpDown();
    $output = $this->drupalGet('node/'. $node_9_3->nid);
    $this->clickVoteUpDown('down');
    
    //Badge: Disciplined
    $output = $this->drupalGet('node/'. $node_9_2->nid);
    $this->assertRaw('<span class="updown-current-score">3</span>',
    	'Article has a rating of 3 points.');
    
    $output = $this->drupalPost('node/'. $node_9_2->nid .'/edit', NULL, t('Delete'));
    $output = $this->drupalPost(NULL, NULL, t('Delete'));
    
    $this->pass($this->checkBadges());
    $this->assertTrue(array_key_exists(BADGE_DISCIPLINED, $this->users_badges[$account_9->uid]),
    	'Badge Disciplined is set.', 'Badge');
    
    //Badge: Peer Pressure
    $output = $this->drupalGet('node/'. $node_9_3->nid);
    $this->assertRaw('<span class="updown-current-score">-3</span>',
    	'Article has a rating of -3 points.');
    $output = $this->drupalPost('node/'. $node_9_3->nid .'/edit', NULL, t('Delete'));
    $output = $this->drupalPost(NULL, NULL, t('Delete'));
    
    $this->pass($this->checkBadges());
    $this->assertTrue(array_key_exists(BADGE_PEER_PRESSURE, $this->users_badges[$account_9->uid]),
    	'Badge Peer Pressure is set.', 'Badge');
    //*/

    /*
     * Badge: Suffrage — Used all 30 votes in a day.
     */
    $this->drupalLogout();
    $this->drupalLogin($account_1212);
    for ($i = 1; $i < 28; $i++) {
      $edit = array(
       'comment' => 'Answer '. $i,
      );
      $this->drupalPost('comment/reply/'. $node_9_4->nid, $edit, t('Save'));
    }
    $output = $this->drupalGet('node/'. $node_9_4->nid);
    $this->clicksButtonsVoteUpDown(array('all' => 'up', ));
    $this->pass($this->checkBadges());
    $this->assertFalse(array_key_exists(BADGE_SUFFRAGE, $this->users_badges[$account_1212->uid]),
    	'Badge "Suffrage" is not set.', 'Badge');
    $output = $this->drupalGet('node/'. $node_9_1->nid);
    $this->clicksButtonsVoteUpDown(array('0' => 'up', ));
    $this->pass($this->checkBadges());
    $this->assertTrue(array_key_exists(BADGE_SUFFRAGE, $this->users_badges[$account_1212->uid]),
    	'Badge "Suffrage" is set.', 'Badge');
    //*/
    
    /*
     * Badge: Self-Learner — Answered your own question with score of 3 or more.
     */
    $this->drupalLogout();
    $this->drupalLogin($account_496);
    $output = $this->drupalGet('node/'. $node_9_1->nid);
    $this->clicksButtonsVoteUpDown(array('0' => 'up', ));
    $this->drupalLogout();
    $this->drupalLogin($account_9);
    $output = $this->drupalGet('node/'. $node_9_1->nid);
    $this->clicksButtonsVoteUpDown(array('0' => 'up', ));
    $output = $this->drupalGet('node/'. $node_9_1->nid);
    $this->assertRaw('<span class="updown-current-score">3</span>', 'Article has a rating of 3 points.');
    $this->pass($this->checkBadges());
    $this->assertFalse(array_key_exists(BADGE_SELF_LEARNER, $this->users_badges[$account_9->uid]),
    	'Badge "Self-Learner" is not set.', 'Badge');
    $edit = array(
     'comment' => 'Answer 1, For badge BADGE_SELF_LEARNER',
    );
    $this->drupalPost('comment/reply/'. $node_9_1->nid, $edit, t('Save'));
    $this->pass($this->checkBadges());
    $this->assertTrue(array_key_exists(BADGE_SELF_LEARNER, $this->users_badges[$account_9->uid]),
    	'Badge "Self-Learner" is set.', 'Badge');
    //*/
    
    /*
     * Badge: Revival — Answered more than 30 days later.
     */
    $this->drupalLogout();
    $this->drupalLogin($account_1212);
    $this->pass($this->checkBadges());
    $this->assertFalse(array_key_exists(BADGE_REVIVAL, $this->users_badges[$account_1212->uid]),
    	'Badge "Revival" is not set.', 'Badge');
    db_query("UPDATE {node} SET created = %d WHERE nid = %d LIMIT 1",
      (time() - 2678400), $node_9_5->nid);  //2678400 = 31 * 24 * 60 * 60
    $node_9_5 = node_load($node_9_5->nid, NULL, TRUE);
    $edit = array(
     'comment' => 'Answer, For badge BADGE_REVIVAL — SET',
    );
    $this->drupalPost('comment/reply/'. $node_9_5->nid, $edit, t('Save'));
    $this->pass($this->checkBadges());
    $this->assertTrue(array_key_exists(BADGE_REVIVAL, $this->users_badges[$account_1212->uid]),
    	'Badge "Revival" is set.', 'Badge');
    //*/
    
    /*
     * Badge: Nice Question — Question score of 10 or more.
     */
    $this->drupalLogout();
    $this->drupalLogin($account_9);
    $this->addVotes($node_9_5->nid, 9);
    $this->pass($this->checkBadges());
    $this->assertFalse(array_key_exists(BADGE_NICE_QUESTION, $this->users_badges[$account_9->uid]),
    	'Badge "Nice Question" is not set.', 'Badge');
    $output = $this->drupalGet('node/'. $node_9_5->nid);
    $this->clickVoteUpDown('up');
    $output = $this->drupalGet('node/'. $node_9_5->nid);
    $this->assertRaw('<span class="updown-current-score">10</span>', 'Node has a rating of 10 points.');
    $this->pass($this->checkBadges());
    $this->assertTrue(array_key_exists(BADGE_NICE_QUESTION, $this->users_badges[$account_9->uid]),
    	'Badge "Nice Question" is set.', 'Badge');
    //*/
    
    /*
     * Badge: Nice Answer — Answer score of 10 or more.
     */
    $edit = array(
     'comment' => 'Answer 1',
    );
    $this->drupalPost('comment/reply/'. $node_9_5->nid, $edit, t('Save'));
    $comments = $this->loadComments($node_9_5->nid);
    $this->addVotes($comments[0]->cid, 9, FALSE, 'comment');
    $this->pass($this->checkBadges());
    $this->assertFalse(array_key_exists(BADGE_NICE_ANSWER, $this->users_badges[$account_9->uid]),
    	'Badge "Nice Answer" is not set.', 'Badge');
    $output = $this->drupalGet('node/'. $node_9_5->nid);
    $this->clicksButtonsVoteUpDown(array('all' => 'up', ));
    $this->pass($this->checkBadges());
    $this->assertTrue(array_key_exists(BADGE_NICE_ANSWER, $this->users_badges[$account_9->uid]),
    	'Badge "Nice Answer" is set.', 'Badge');
    //*/
    
    /*
     * Badge: Good Question — Question score of 25 or more.
     */
    $this->addVotes($node_9_6->nid, 24);
    $this->pass($this->checkBadges());
    $this->assertFalse(array_key_exists(BADGE_GOOD_QUESTION, $this->users_badges[$account_9->uid]),
    	'Badge "Good Question" is not set.', 'Badge');
    $output = $this->drupalGet('node/'. $node_9_6->nid);
    $this->clickVoteUpDown('up');
    $output = $this->drupalGet('node/'. $node_9_6->nid);
    $this->assertRaw('<span class="updown-current-score">25</span>', 'Node has a rating of 25 points.');
    $this->pass($this->checkBadges());
    $this->assertTrue(array_key_exists(BADGE_GOOD_QUESTION, $this->users_badges[$account_9->uid]),
    	'Badge "Good Question" is set.', 'Badge');
    //*/
    
    
    /*
     * Badge: Badge: Good Answer — Answer score of 25 or more.
     */
    $edit = array(
     'comment' => 'Answer 1',
    );
    $this->drupalPost('comment/reply/'. $node_9_6->nid, $edit, t('Save'));
    $comments = $this->loadComments($node_9_6->nid);
    $this->addVotes($comments[0]->cid, 24, FALSE, 'comment');
    $this->pass($this->checkBadges());
    $this->assertFalse(array_key_exists(BADGE_GOOD_ANSWER, $this->users_badges[$account_9->uid]),
    	'Badge "Good Answer" is not set.', 'Badge');
    $output = $this->drupalGet('node/'. $node_9_6->nid);
    $this->clicksButtonsVoteUpDown(array('all' => 'up', ));
    $this->pass($this->checkBadges());
    $this->assertTrue(array_key_exists(BADGE_GOOD_ANSWER, $this->users_badges[$account_9->uid]),
    	'Badge "Good Answer" is set.', 'Badge');
    //*/
    
    /*
     * Badge: Great Question — Question score of 100 or more.
     */
    $this->addVotes($node_9_7->nid, 99);
    $this->pass($this->checkBadges());
    $this->assertFalse(array_key_exists(BADGE_GREAT_QUESTION, $this->users_badges[$account_9->uid]),
    	'Badge "Great Question" is not set.', 'Badge');
    $output = $this->drupalGet('node/'. $node_9_7->nid);
    $this->clickVoteUpDown('up');
    $output = $this->drupalGet('node/'. $node_9_7->nid);
    $this->assertRaw('<span class="updown-current-score">100</span>', 'Node has a rating of 100 points.');
    $this->pass($this->checkBadges());
    $this->assertTrue(array_key_exists(BADGE_GREAT_QUESTION, $this->users_badges[$account_9->uid]),
    	'Badge "Great Question" is set.', 'Badge');
    //*/
    
    /*
     * Badge: Great Answer — Answer score of 100 or more.
     */
    
    $edit = array(
     'comment' => 'Answer 1',
    );
    $this->drupalPost('comment/reply/'. $node_9_7->nid, $edit, t('Save'));
    $comments = $this->loadComments($node_9_7->nid);
    $this->addVotes($comments[0]->cid, 99, FALSE, 'comment');
    $this->pass($this->checkBadges($account_9->uid));
    $this->assertFalse(array_key_exists(BADGE_GREAT_ANSWER, $this->users_badges[$account_9->uid]),
    	'Badge "Great Answer" is not set.', 'Badge');
    $output = $this->drupalGet('node/'. $node_9_7->nid);
    $this->clicksButtonsVoteUpDown(array('all' => 'up', ));
    $this->pass($this->checkBadges($account_9->uid));
    $this->assertTrue(array_key_exists(BADGE_GREAT_ANSWER, $this->users_badges[$account_9->uid]),
    	'Badge "Great Answer" is set.', 'Badge');
    //*/

    /*
     * Badge: Civic Duty — Voted 300 or more times.
     */
    $this->drupalLogout();
    $this->drupalLogin($account_100);
    $this->addVotes(30000, 299, $account_100->uid);
    $output = $this->drupalGet('node/'. $node_9_1->nid);
    $this->clickVoteUpDown('down');
    $this->pass($this->checkBadges($account_100->uid));
    $this->assertTrue(array_key_exists(BADGE_CIVIC_DUTY, $this->users_badges[$account_100->uid]),
    	'Badge "Civic Duty" is set.', 'Badge');
    //*/
    
    /*
     * Badge: Sportsmanship — Up voted 100 answers.
     */
    $output = $this->drupalGet('node/'. $node_9_1->nid);
    $this->addVotes(30000, 99, $account_100->uid, 'comment');
    $this->pass($this->checkBadges($account_100->uid));
    $this->assertFalse(array_key_exists(BADGE_SPORTSMANSHIP, $this->users_badges[$account_100->uid]),
    	'Badge "Sportsmanship" is not set.', 'Badge');
    $output = $this->drupalGet('node/'. $node_9_1->nid);
    $this->clicksButtonsVoteUpDown(array('all' => 'up', ));
    $this->pass($this->checkBadges($account_100->uid));
    $this->assertTrue(array_key_exists(BADGE_SPORTSMANSHIP, $this->users_badges[$account_100->uid]),
    	'Badge "Sportsmanship" is set.', 'Badge');
    //*/
    
    /*
     * Badge: Electorate — Voted on 600 questions and 25% or more of total votes are on questions.
     */
    $this->drupalLogout();
    $this->drupalLogin($account_23);
    $this->addVotes(30001, 149, $account_23->uid);
    $this->addVotes(30001, 449, $account_23->uid, 'comment');
    $output = $this->drupalGet('node/'. $node_9_1->nid);
    $this->clicksButtonsVoteUpDown(array('1' => 'up', ));
    $this->pass($this->checkBadges($account_23->uid));
    $this->assertFalse(array_key_exists(BADGE_ELECTORATE, $this->users_badges[$account_23->uid]),
    	'Badge "Electorate" is not set.', 'Badge');
    
    $output = $this->drupalGet('node/'. $node_9_1->nid);
    $this->clicksButtonsVoteUpDown(array('all' => 'up', ));
    $this->pass($this->checkBadges($account_23->uid));
    $this->assertTrue(array_key_exists(BADGE_ELECTORATE, $this->users_badges[$account_23->uid]),
    	'Badge "Electorate" is set.', 'Badge');
    //*/
    
    /*
     * Badge: Favorite Question — Question favorited by 25 users.
     */
    $this->addFlags('bookmarks', $node_9_1->nid, 23, NULL);
    $output = $this->drupalGet('node/'. $node_9_1->nid);
    $this->clickAddFavorites($node_9_1->nid);
    $this->drupalLogout();
    $this->drupalLogin($account_496);
    $this->pass($this->checkBadges($account_9->uid));
    $this->assertFalse(array_key_exists(BADGE_FAVORITE_QUESTION, $this->users_badges[$account_9->uid]),
    	'Badge "Favorite Question" is not set.', 'Badge');
    $output = $this->drupalGet('node/'. $node_9_1->nid);
    $this->clickAddFavorites($node_9_1->nid);
    $this->pass($this->checkBadges($account_9->uid));
    $this->assertTrue(array_key_exists(BADGE_FAVORITE_QUESTION, $this->users_badges[$account_9->uid]),
    	'Badge "Favorite Question" is set.', 'Badge');
    //*/
    
    /*
     * Badge: Stellar Question — Question favorited by 100 users.
     */
    $this->addFlags('bookmarks', $node_9_4->nid, 98, NULL);
    $output = $this->drupalGet('node/'. $node_9_4->nid);
    $this->clickAddFavorites($node_9_4->nid);
    $this->drupalLogout();
    $this->drupalLogin($account_23);
    $this->pass($this->checkBadges($account_9->uid));
    $this->assertFalse(array_key_exists(BADGE_STELLAR_QUESTION,
    	$this->users_badges[$account_9->uid]),
    	'Badge "Stellar Question" is not set.', 'Badge'
    );
    $output = $this->drupalGet('node/'. $node_9_4->nid);
    $this->clickAddFavorites($node_9_4->nid);
    $this->pass($this->checkBadges($account_9->uid));
    $this->assertTrue(array_key_exists(BADGE_STELLAR_QUESTION,
    	$this->users_badges[$account_9->uid]),
    	'Badge "Stellar Question" is set.', 'Badge'
    );
    //*/
    
    /*
     * Badge: Scholar — Asked a question and accepted an answer.
     */
    $this->drupalLogout();
    $this->drupalLogin($account_9);
    $output = $this->drupalGet('node/'. $node_9_1->nid);
    $this->pass($this->checkBadges());
    $this->assertFalse(array_key_exists(BADGE_SCHOLAR,
      $this->users_badges[$account_9->uid]),
    	'Badge "Scholar" is not set.', 'Badge'
    );
    
    $comments = $this->loadComments($node_9_1->nid);
    $this->clickBestAnswer($comments[0]->cid, 'best-answer');
    $this->pass($this->checkBadges($account_9->uid));
    $this->assertTrue(array_key_exists(BADGE_SCHOLAR,
      $this->users_badges[$account_9->uid]),
    	'Badge "Scholar" is set.', 'Badge'
    );
    $output = $this->drupalGet('node/'. $node_9_1->nid);
    //*/

    /*
     * Badge: Enlightened — First answer was accepted with score of 10 or more.
     */
    $output = $this->drupalGet('node/'. $node_9_8->nid);
    $edit = array(
     'comment' => 'Answer 1 — few points',
    );
    $this->drupalPost('comment/reply/'. $node_9_8->nid, $edit, t('Save'));
    
    $output = $this->drupalGet('node/'. $node_9_8->nid);
    $edit = array(
     'comment' => 'Answer 2 — enough points',
    );
    $this->drupalPost('comment/reply/'. $node_9_8->nid, $edit, t('Save'));
    
    $comments = $this->loadComments($node_9_8->nid);
    $this->addVotes($comments[0]->cid, 8, FALSE, 'comment');
    $this->addVotes($comments[1]->cid, 9, FALSE, 'comment');
    $this->clicksButtonsVoteUpDown(array('all' => 'up', ));
    
    $output = $this->drupalGet('node/'. $node_9_8->nid);
    $this->clickBestAnswer($comments[0]->cid, 'best-answer');
    $this->pass($this->checkBadges());
    $this->assertFalse(array_key_exists(BADGE_ENLIGHTENED,
      $this->users_badges[$account_9->uid]),
    	'Badge "Enlightened" is not set.', 'Badge'
    );
    
    $this->clickBestAnswer($comments[1]->cid, 'best-answer');
    $this->pass($this->checkBadges());
    $this->assertTrue(array_key_exists(BADGE_ENLIGHTENED,
      $this->users_badges[$account_9->uid]),
    	'Badge "Enlightened" is set.', 'Badge'
    );
    //*/
    
    /*
     * Badge: Guru — Accepted answer and score of 40 or more.
     */
    $output = $this->drupalGet('node/'. $node_9_8->nid);
    $this->clicksButtonsVoteUpDown(array('all' => 'down', ));
    $this->addVotes($comments[0]->cid, 30, FALSE, 'comment');
    $this->addVotes($comments[1]->cid, 30, FALSE, 'comment');
    $output = $this->drupalGet('node/'. $node_9_8->nid);
    $this->clicksButtonsVoteUpDown(array('all' => 'up', ));
    
    $output = $this->drupalGet('node/'. $node_9_8->nid);
    $this->clickBestAnswer($comments[0]->cid, 'best-answer');
    $this->clickBestAnswer($comments[1]->cid, 'best-answer');
    
    $this->clickBestAnswer($comments[0]->cid, 'best-answer');
    $this->pass($this->checkBadges());
    $this->assertFalse(array_key_exists(BADGE_GURU,
      $this->users_badges[$account_9->uid]), 'Badge "Guru" is not set.', 'Badge'
    );
    
    $this->clickBestAnswer($comments[1]->cid, 'best-answer');
    $this->pass($this->checkBadges());
    $this->assertTrue(array_key_exists(BADGE_GURU,
      $this->users_badges[$account_9->uid]), 'Badge "Guru" is set.', 'Badge'
    );
    //*/
    
    /*
     * Badge: Necromancer — Answered a question more than 60 days later with score of 5 or more.
     */
    $this->drupalLogout();
    $this->drupalLogin($account_23);
    $this->pass($this->checkBadges($account_23->uid));
    $this->assertFalse(array_key_exists(BADGE_NECROMANCER,
      $this->users_badges[$account_23->uid]), 'Badge "Necromancer" is not set.', 'Badge'
    );
    
    $time = time() - 5184000;  //5184000 = 60day * 24h * 60m * 60s
    db_query("UPDATE {node} SET created = %d, changed = %d
      WHERE nid = %d LIMIT 1", $time, $time, $node_9_9->nid);
    
    $output = $this->drupalGet('node/'. $node_9_9->nid);
    $this->addVotes($node_9_9->nid, 5);
    
    $edit = array(
     'comment' => 'Answer 1',
    );
    $this->drupalPost('comment/reply/'. $node_9_9->nid, $edit, t('Save'));
    
    $this->pass($this->checkBadges($account_23->uid));
    $this->assertTrue(array_key_exists(BADGE_NECROMANCER,
      $this->users_badges[$account_23->uid]), 'Badge "Necromancer" is set.', 'Badge'
    );
    //*/
    
    /*
     * Badge: Populist — Answer outscored an accepted answer with score of more than 10 by more than 2x.
     */
    $edit = array(
     'comment' => 'Answer 2',
    );
    $this->drupalPost('comment/reply/'. $node_9_9->nid, $edit, t('Save'));
    $comments = $this->loadComments($node_9_9->nid);
    $output = $this->drupalGet('node/'. $node_9_9->nid);
    $this->clickBestAnswer($comments[0]->cid, 'best-answer');
    $this->addVotes($comments[0]->cid, 10, FALSE, 'comment');
    $this->addVotes($comments[1]->cid, 20, FALSE, 'comment');
    
    $output = $this->drupalGet('node/'. $node_9_9->nid);
    $this->clicksButtonsVoteUpDown(array('2' => 'up', ));
    
    $this->pass($this->checkBadges($account_23->uid));
    $this->assertFalse(array_key_exists(BADGE_POPULIST,
      $this->users_badges[$account_23->uid]), 'Badge "Populist" is not set.', 'Badge'
    );
    $this->drupalLogout();
    $this->drupalLogin($account_9);
    
    $output = $this->drupalGet('node/'. $node_9_9->nid);
    $this->clicksButtonsVoteUpDown(array('2' => 'up', ));
    $this->pass($this->checkBadges($account_23->uid));
    $this->assertTrue(array_key_exists(BADGE_POPULIST,
      $this->users_badges[$account_23->uid]), 'Badge "Populist" is set.', 'Badge'
    );
    //*/
    
    
    $output = $this->drupalGet('node/'. $node_9_9->nid);
    $this->outputScreenContents('Test Screen.');  //FIXME
    //$output = $this->drupalGet('questions');
    
  }
  //http://drupal.org/simpletest
  //http://drupal.org/node/265828
  //http://contribs.rocky-shore.net/simpletest/doxy/html/classDrupalWebTestCase.html#09dc4d0df6951a4ed5c15ec8ecd04571
  //http://www.opensourcery.com/blog/jonathan-hedstrom/test-driven-drupal-development-take-2
  //http://www.lullabot.com/articles/drupal-module-developer-guide-simpletest
  //http://groups.drupal.org/node/11020
  //http://www.comm-press.de/en/blog/simple-test-drupal
}


/*
 * Add permition: delete own question content, edit own question content
 * 
 * 			view statistic
 */




