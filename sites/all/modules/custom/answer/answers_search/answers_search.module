<?php

/**
 * @file
 * Search functions for answers module
 */

/**
 * Implementation of hook_answers_search_info()
 */
function answers_search_answers_search_info() {
  return array('engine_name' => t('Drupal core search'), 'module' => 'answers_search');
}

/**
 * Implementation of hook_answers_search_results(search_text)
 */
function answers_search_answers_search_results($search_text) {
  return answers_search_node_search('type:question '. $search_text);
}

/**
 * Copy of node_search() function. Added status ranking
 */
function answers_search_node_search($keys) {
  // Build matching conditions
  list($join1, $where1) = _db_rewrite_sql();
  $arguments1 = array();
  $conditions1 = 'n.status = 1';

  if ($type = search_query_extract($keys, 'type')) {
    $types = array();
    foreach (explode(',', $type) as $t) {
      $types[] = "n.type = '%s'";
      $arguments1[] = $t;
    }
    $conditions1 .= ' AND ('. implode(' OR ', $types) .')';
    $keys = search_query_insert($keys, 'type');
  }

  if ($category = search_query_extract($keys, 'category')) {
    $categories = array();
    foreach (explode(',', $category) as $c) {
      $categories[] = "tn.tid = %d";
      $arguments1[] = $c;
    }
    $conditions1 .= ' AND ('. implode(' OR ', $categories) .')';
    $join1 .= ' INNER JOIN {term_node} tn ON n.vid = tn.vid';
    $keys = search_query_insert($keys, 'category');
  }
  
  // Join best answers
  $select_best_answers_sql = "SELECT COUNT(*) AS count, node.nid FROM {flag_content} flag_content INNER JOIN {comments} comments ON comments.cid = flag_content.content_id INNER JOIN {node} node ON node.nid = comments.nid WHERE flag_content.content_type = 'comment' AND flag_content.fid = 2 GROUP BY nid";
  $join1 .= " LEFT JOIN ({$select_best_answers_sql}) best_answers ON best_answers.nid = n.nid";

  // Build ranking expression (we try to map each parameter to a
  // uniform distribution in the range 0..1).
  $ranking = array();
  $arguments2 = array();
  $join2 = '';
  // Used to avoid joining on node_comment_statistics twice
  $stats_join = FALSE;
  $total = 0;
  if ($weight = (int)variable_get('node_rank_relevance', 5)) {
    // Average relevance values hover around 0.15
    $ranking[] = '%d * i.relevance';
    $arguments2[] = $weight;
    $total += $weight;
  }
  if ($weight = (int)variable_get('node_rank_recent', 5)) {
    // Exponential decay with half-life of 6 months, starting at last indexed node
    $ranking[] = '%d * POW(2, (GREATEST(MAX(n.created), MAX(n.changed), MAX(c.last_comment_timestamp)) - %d) * 6.43e-8)';
    $arguments2[] = $weight;
    $arguments2[] = (int)variable_get('node_cron_last', 0);
    $join2 .= ' LEFT JOIN {node_comment_statistics} c ON c.nid = i.sid';
    $stats_join = TRUE;
    $total += $weight;
  }
  if (module_exists('comment') && $weight = (int)variable_get('node_rank_comments', 5)) {
    // Inverse law that maps the highest reply count on the site to 1 and 0 to 0.
    $scale = variable_get('node_cron_comments_scale', 0.0);
    $ranking[] = '%d * (2.0 - 2.0 / (1.0 + MAX(c.comment_count) * %f))';
    $arguments2[] = $weight;
    $arguments2[] = $scale;
    if (!$stats_join) {
      $join2 .= ' LEFT JOIN {node_comment_statistics} c ON c.nid = i.sid';
    }
    $total += $weight;
  }
  if (module_exists('statistics') && variable_get('statistics_count_content_views', 0) &&
    $weight = (int)variable_get('node_rank_views', 5)) {
    // Inverse law that maps the highest view count on the site to 1 and 0 to 0.
    $scale = variable_get('node_cron_views_scale', 0.0);
    $ranking[] = '%d * (2.0 - 2.0 / (1.0 + MAX(nc.totalcount) * %f))';
    $arguments2[] = $weight;
    $arguments2[] = $scale;
    $join2 .= ' LEFT JOIN {node_counter} nc ON nc.nid = i.sid';
    $total += $weight;
  }

  // When all search factors are disabled (ie they have a weight of zero),
  // the default score is based only on keyword relevance and there is no need to
  // adjust the score of each item.
  if ($total == 0) {
    $select2 = 'i.relevance AS score';
    $total = 1;
  }
  else {
    $select2 = implode(' + ', $ranking) . ' AS score';
  }

  // Order by best answers
  $sort_parameters = 'ORDER BY best_answers.count DESC, score DESC';

  // Do search.
  $find = answers_search_do_search($keys, 'node', 'INNER JOIN {node} n ON n.nid = i.sid '. $join1, $conditions1 . (empty($where1) ? '' : ' AND '. $where1), $arguments1, $select2, $join2, $arguments2, $sort_parameters);

  // Load results.
  $results = array();
  foreach ($find as $item) {
    // Build the node body.
    $node = node_load($item->sid);
    $node->build_mode = NODE_BUILD_SEARCH_RESULT;
    $node = node_build_content($node, FALSE, FALSE);
    $node->body = drupal_render($node->content);

    // Fetch comments for snippet.
    $node->body .= module_invoke('comment', 'nodeapi', $node, 'update index');
    // Fetch terms for snippet.
    $node->body .= module_invoke('taxonomy', 'nodeapi', $node, 'update index');

    $extra = node_invoke_nodeapi($node, 'search result');
    $results[] = array(
      'link' => url('node/'. $item->sid, array('absolute' => TRUE)),
      'type' => check_plain(node_get_types('name', $node)),
      'title' => $node->title,
      'user' => theme('username', $node),
      'date' => $node->changed,
      'node' => $node,
      'extra' => $extra,
      'score' => $item->score / $total,
      'snippet' => search_excerpt($keys, $node->body),
    );
  }
  return $results;
}

/**
 * Copy of do_search() function. Added results limit
 */
function answers_search_do_search($keywords, $type, $join1 = '', $where1 = '1 = 1', $arguments1 = array(), $columns2 = 'i.relevance AS score', $join2 = '', $arguments2 = array(), $sort_parameters = 'ORDER BY score DESC') {
  $limit = variable_get('answers_search_limit_nodes', 10);

  $query = search_parse_query($keywords);

  if ($query[2] == '') {
    form_set_error('keys', t('You must include at least one positive keyword with @count characters or more.', array('@count' => variable_get('minimum_word_size', 3))));
  }
  if ($query[6]) {
    if ($query[6] == 'or') {
      drupal_set_message(t('Search for either of the two terms with uppercase <strong>OR</strong>. For example, <strong>cats OR dogs</strong>.'));
    }
  }
  if ($query === NULL || $query[0] == '' || $query[2] == '') {
    return array();
  }

  // Build query for keyword normalization.
  $conditions = "$where1 AND ($query[2]) AND i.type = '%s'";
  $arguments1 = array_merge($arguments1, $query[3], array($type));
  $join = "INNER JOIN {search_total} t ON i.word = t.word $join1";
  if (!$query[5]) {
    $conditions .= " AND ($query[0])";
    $arguments1 = array_merge($arguments1, $query[1]);
    $join .= " INNER JOIN {search_dataset} d ON i.sid = d.sid AND i.type = d.type";
  }

  // Calculate maximum keyword relevance, to normalize it.
  $select = "SELECT SUM(i.score * t.count) AS score FROM {search_index} i $join WHERE $conditions GROUP BY i.type, i.sid HAVING COUNT(*) >= %d ORDER BY score DESC";
  $arguments = array_merge($arguments1, array($query[4]));
  $normalize = db_result(db_query_range($select, $arguments, 0, 1));
  if (!$normalize) {
    return array();
  }
  $columns2 = str_replace('i.relevance', '('. (1.0 / $normalize) .' * SUM(i.score * t.count))', $columns2);

  // Build query to retrieve results.
  $select = "SELECT i.type, i.sid, $columns2 FROM {search_index} i $join $join2 WHERE $conditions GROUP BY i.type, i.sid HAVING COUNT(*) >= %d";
  $count_select =  "SELECT COUNT(*) FROM ($select) n1";
  $arguments = array_merge($arguments2, $arguments1, array($query[4]));

  // Do actual search query
  $result = answers_pager_query("$select $sort_parameters", $limit, 0, $count_select, $arguments);
  $results = array();
  while ($item = db_fetch_object($result)) {
    $results[] = $item;
  }
  return $results;
}

