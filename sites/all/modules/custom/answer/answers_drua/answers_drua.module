<?php
// $Id$

/**
  * @file
  * 1. Dublicate urls: autocomplite, comment form alter, save dublicate urls
  * 2. Mark as "Best Answer": change question status on mark/unmark as
  * 3. Block "Question Topics" themed list of "Topics" vocabulary (vid = 3)
  */


/**
 * Implementation of hook_menu().
 */
function answers_drua_menu() {
  $items = array();
  $items['answers/dublicated_url'] = array(
    'title' => 'Get all urls',
    'description' => 'JS autocomplete callback',
    'page callback' => 'answers_drua_dublicated_autocomplete',
    'access callback' => 'user_access',
    'access arguments' => array('change question status'),
    'type' => MENU_CALLBACK,
    'file' => 'answers_drua.pages.inc',
  );
  return $items;
}


/**
 * Implementation of hook_form_answer_alter().
 */
function answers_drua_form_answer_alter(&$form, $form_state, $form_id) {
  global $base_path;
  $base_url = $_SERVER['HTTP_HOST'] . $base_path;
  $result = db_query('SELECT nid FROM {content_field_dublicate}
    WHERE field_dublicate_nid = %d',
    $form['nid']['#value']
  );
  while ($row = db_fetch_array($result)) {
    $dublicate_urls[] = l('node/'. $row['nid'], 'node/'. $row['nid']);
  }
  // Add JS to handle display of "Dublicate URL" field
  $js_data = '
    function dublicate_url_handle() {
      if($("#edit-question-status").attr("value") == 2) {
        $("#dublicate_url").show();
      }
      else {
        $("#dublicate_url").hide();
        $("#edit-dublicate-url").val("");
      }
    }
    $("#question_status").change(function(){
      dublicate_url_handle();
    });
    $(document).ready(function(){
      dublicate_url_handle();
    });';
  drupal_add_js($js_data, 'inline', 'header', TRUE);
  drupal_add_css(drupal_get_path('module', 'answers_drua') . '/answers_drua.css');
  $form['change_status']['dublicate_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Dublicate URL'),
    '#description' => t('Only links from this site are accepted.<br/>Dublicate URLs in use:<br/>!items',
      array('!items' => theme('item_list', $dublicate_urls))),
    '#default_value' => '',
    '#size' => 60,
    '#maxlength' => 128,
    '#required' => FALSE,
    '#prefix' => '<div id="dublicate_url">',
    '#suffix' => '</div>',
    '#field_prefix' => 'http://'. $base_url,
    '#autocomplete_path' => 'answers/dublicated_url',
  );
  $form['change_status']['base_url'] = array('#type' => 'value', '#value' => $base_url);
}


/**
 * Implementation of hook_answers_change_status()
 */
function answers_drua_answers_change_status_validate($form, &$form_state) {
  if (!empty($form_state['values']['dublicate_url'])) {
    $dub = trim($form_state['values']['dublicate_url'], "http://");
    // TODO I'm not sure about tactic but 'trim' dont work it trims out /n from string
    $dublicate_url = str_replace($form_state['values']['base_url'], '', $dub);
    $url = explode('/', $dublicate_url);
    $nid = $form_state['values']['node']->nid;
    if (($url[0] == 'node') && is_numeric($url[1])) {
      $field_nid = $url[1];
      $dub_array = answers_drua_dublicate_validate($nid, $field_nid);
      if ($dub_array['error']) {
        form_set_error('dublicate_url', t('This URL is marked as dublicaded already.'));
      }
      elseif ($dub_array['field_error']) {
        form_set_error('dublicate_url',
          t('Node "@title" do not have "dublicated" field.',
          array('@title' => $dub_array['title']))
        );
      }
      else {
        // nid of current question (field_dublicate_nid)
        $form_state['st']['nid'] = $nid;
        // nid of linked question (from field)
        $form_state['st']['field_nid'] = $field_nid;
      }
    }
    else {
      $src = db_result(db_query('SELECT src FROM {url_alias} WHERE dst = "%s"', $dublicate_url));
      if($src) {
        $url = explode('/', $src);
        if(($url[0] == 'node') && is_numeric($url[1])) {
          $field_nid = $url[1];
          $dub_array = answers_drua_dublicate_validate($nid, $field_nid);

          if ($dub_array['error']) {
            form_set_error('dublicate_url', t('This URL is marked as dublicaded already.'));
          }
          elseif ($dub_array['field_error']) {
            form_set_error('dublicate_url',
              t('Node "@title" do not have "dublicated" field.',
              array('@title' => $dub_array['title']))
            );
          }
          else {
            // nid of current question (field_dublicate_nid)
            $form_state['st']['nid'] = $nid;
            // nid of linked question (from field)
            $form_state['st']['field_nid'] = $field_nid;
          }
        }
      }
      else {
        form_set_error('dublicate_url', t('This URL is not found.'));
      }
    }
  }
}


/**
 * Helper function for dublicated nid validation
 */
function answers_drua_dublicate_validate($nid, $field_nid) {
  $out = array(
    'error' => FALSE,
    'nodes' => array(),
    'dublicate' => array(),
    'field_error' => FALSE,
    'title' => '',
  );
  $c_nid_result = db_query('SELECT nid, vid, delta, field_dublicate_nid
    FROM {content_field_dublicate}
    WHERE nid = %d ORDER BY delta ASC', $field_nid
  );
  $fiel_node = node_load($field_nid);
  $out['title'] = $fiel_node->title;
  while ($row = db_fetch_array($c_nid_result)) {
    $rows[$row['nid']][$row['delta']] = $row;
    $dubs[$row['field_dublicate_nid']][$row['delta']] = $row;
    $delta = $row['delta'];
  }
  if (is_array($dubs[$nid])) {
    $out['error'] = TRUE;
  }
  elseif (!isset($fiel_node->field_dublicate)) {
    $out['field_error'] = TRUE;
  }
  if (is_array($rows)) {
    $out['nodes'] = $rows;
    $out['dublicate'] = $dubs;
  }
  return $out;
}


/**
 * Implementation of hook_answers_change_status()
 */
function answers_drua_answers_change_status_submit($form, &$form_state) {
  if (isset($form_state['st']['field_nid'])) {
    $field_nid = $form_state['st']['field_nid'];
    $nid = $form_state['st']['nid'];
    $delta = $form_state['st']['delta'];
    $field_node = node_load($field_nid);
    if (isset($field_node->field_dublicate)) {
      $field_node->field_dublicate[]['nid'] = $nid;
      node_save($field_node);
      drupal_set_message(t('Node "@title" is set as dublicated.',
        array('@title' => $field_node->title))
      );
    }
    else {
      form_set_error('dublicate_url',
        t('Node "@title" do not have "dublicated" field.',
        array('@title' => $field_node->title))
      );
    }
  }
}


/**
 * Implementation of hook_answers_mark($nid, $cid)
 */
function answers_drua_answers_mark($nid, $cid) {
  $sid = db_result(db_query('SELECT sid FROM {answers_quests} WHERE nid = %d', $nid));
  if (is_numeric($sid) && ($sid < 3)) {
    db_query("UPDATE {answers_quests} SET sid = %d WHERE nid = %d", 3, $nid);
    drupal_set_message(t('Status of question is changes to "Answered".'));
  }
}


/**
 * Implementation of hook_answers_unmark($nid, $cid)
 */
function answers_drua_answers_unmark($nid, $cid) {
  $sid = db_result(db_query('SELECT sid FROM {answers_quests} WHERE nid = %d', $nid));
  $result = db_query('SELECT a.cid, a.status
    FROM {comments} c
    INNER JOIN {answers_answers} a ON c.cid = a.cid
    WHERE c.nid = %d AND c.status = %d AND a.status > 0',
    $nid, COMMENT_PUBLISHED
  );
  while ($answer = db_fetch_object($result)) {
    $best_answers[] = $answer;
  }
  if (!is_array($best_answers)) {
    if (is_numeric($sid) && ($sid != 1)) {
      db_query("UPDATE {answers_quests} SET sid = %d WHERE nid = %d", 1, $nid);
      drupal_set_message(t('Status of question is changes to "Not answered".'));
    }
  }
}


/**
 * Implementation of hook_block()
 */
function answers_drua_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks['question_topics'] = array('info' => t('Question Topics'),);
    return $blocks;
  }
  elseif ($op == 'configure' && $delta == 'question_topics') {
    $res = db_query('SELECT vid, name FROM {vocabulary} WHERE 1');
    while($row = db_fetch_array($res)) {
      $opts[$row['vid']] = $row['name'];
    }
    $form['answers_topics_vocab'] = array(
      '#type' => 'select',
      '#title' => t('Vocabulary to display in block'),
      '#default_value' => variable_get('answers_topics_vocab', 3),
      '#options' => $opts,
    );
    return $form;
  }
  elseif ($op == 'save' && $delta == 'question_topics') {
    variable_set('answers_topics_vocab', $edit['answers_topics_vocab']);
  }
  elseif ($op == 'view') {
    switch ($delta) {
      case 'question_topics':
        $title = db_result(db_query(
        	'SELECT name FROM {vocabulary} WHERE vid = %d',
          variable_get('answers_topics_vocab', 3))
        );
        $sql = 'SELECT term_data.tid AS tid, term_data.name AS term_data_name,
          term_data.vid AS term_data_vid
          FROM {term_data} term_data
          WHERE term_data.vid = %d
          ORDER BY term_data.weight ASC';
        $result = db_query($sql, variable_get('answers_topics_vocab', 3));
        while ($row = db_fetch_array($result)) {
          $term = array('vid' => $row['vid'], 'tid' => $row['tid']);
          settype($term, 'object');
          $term_path = taxonomy_term_path($term);
          $items[] = l($row['term_data_name'], $term_path,
            array('attributes' => array('class' => 'topic-'. $row['tid'])));
       }

      $content = '<div class="panel-pane gray-block gray-list taxonomy-icons">
    <div class="pane-wrapper">
      <h3 class="pane-title">'. $title .'</h3>';
      $content .= '<div class="pane-content">
      <div class="view view-answers-topics view-id-answers_topics view-display-id-block_1 view-dom-id-3">
      <div class="view-content">';
      $content .= theme('item_list', $items);
      $content .= '</div></div></div></div></div>';

      $block = array('subject' => '', 'content' => $content, );
      break;
    }
    return $block;
  }
}

