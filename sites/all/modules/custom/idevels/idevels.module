<?php
/**
 * files module idevels.
 */

/**
 * Implementation of hook_menu_alter().
 */
function idevels_menu_alter(&$items) {
  $items['vk/login']['page callback'] = 'idevels_vk_login';
  $items['node']['access callback'] = FALSE;
  if (isset($items['node/add/helper'])) {
    $items['node/add/question'] = $items['node/add/helper'];
    $items['node/add/question']['page arguments'] = array('helper');
    unset($items['node/add/helper']);
  }
}

/**
 * Implements hook_menu().
 */
function idevels_menu() {
  $items['idevels-taxonomy/autocomplete'] = array(
    'title' => 'Autocomplete taxonomy',
    'page callback' => 'idevels_taxonomy_autocomplete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['add/%/resource'] = array(
   'page callback'    => 'examples_ctools_modal_review',
   'page arguments'   => array(1),
   'access arguments' => array('create resource content'),
 );
  $items['admin/settings/change_bg_image'] = array(
    'title' => t('Change background image'), //page title
    'description' => 'A form to change background image.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('idevels_change_header_image_form'),
    'access arguments' => array('access administration pages'),
  );
  return $items;
}

/**
 * Custom autocomplete for cities
 */
function idevels_taxonomy_autocomplete($vid, $string = '') {
  global $channel;
  // This key from scripts.js from idevels theme
  $key = '                                                                                                    |events|';
  // Cities autocomplete is a litle diferent
  if ($vid == 11 AND strpos($string, $key) !== FALSE) {
    $event_page = TRUE;
    $string = str_replace($key, '', $string);
  }
  else {
    $event_page = FALSE; 
  }
  module_load_include('views');
  // The user enters a comma-separated list of tags. We only autocomplete the last tag.
  $array = drupal_explode_tags($string);

  // Fetch last tag
  $last_string = trim(array_pop($array));
  $matches = array('');
  if ($last_string != '') {
    // Cities autocomplete have own sql query
    if ($event_page) {
        $result = db_query(
          "SELECT  `term_data`.`name`
          FROM  `content_type_events` 
          INNER JOIN  `term_data` ON  `content_type_events`.`field_city_value` =  `term_data`.`tid`
          WHERE LOWER(`term_data`.`name`) LIKE LOWER('%%%s%%')
          GROUP BY  `field_city_value` 
          ORDER BY COUNT(  `field_city_value` ) DESC 
          LIMIT 0 , 10"
        , $last_string);
    }
    else {
      $result = db_query_range(db_rewrite_sql("SELECT t.tid, t.name FROM {term_data} t WHERE t.vid = %d AND LOWER(t.name) LIKE LOWER('%%%s%%')", 't', 'tid'), $vid, $last_string, 0, 10);
    }
    $prefix = count($array) ? implode(', ', $array) .', ' : '';

    while ($tag = db_fetch_object($result)) {
      $n = $tag->name;
      // Commas and quotes in terms are special cases, so encode 'em.
      if (strpos($tag->name, ',') !== FALSE || strpos($tag->name, '"') !== FALSE) {
        $n = str_replace('"', '""', $tag->name);
      }
      $display = views_get_page_view();
      $view = $display->view;
      $matches[$prefix . $n] = check_plain($tag->name);
    }
  }

  drupal_json($matches);
}

function idevels_vk_login() {
  global $language;
  $member = authOpenAPIMember();

  if ($member !== FALSE) {
    $vkuid = $_POST['uid'];
    $vk_data = _vk_get_user_data($vkuid);
    $vk_data['last_update'] = time();

    $r = db_fetch_object(db_query("SELECT uid FROM {vkontakte_users} WHERE vkuid = %d", $vkuid));
    $newuser = FALSE;
    if (!$r->uid) {
      $vk_data['confirmed'] = FALSE;
      // create new user
      $account = new stdClass();

      $account->name = variable_get('vk_openapi_username', '%first_name %last_name_lq%nickname%last_name_rq %last_name');
      $account->name = str_replace('%first_name', $vk_data['first_name'], $account->name);
      $account->name = str_replace('%last_name', $vk_data['last_name'], $account->name);
      if (mb_strlen($nickname)) {
        $account->name = str_replace('%nickname_lq', variable_get('vk_openapi_nickname_lq', '«'), $account->name);
        $account->name = str_replace('%nickname_rq', variable_get('vk_openapi_nickname_rq', '»'), $account->name);
        $account->name = str_replace('%nickname', $vk_data['nickname'], $account->name);
      }
      else {
        $account->name = str_replace('%nickname_lq', '', $account->name);
        $account->name = str_replace('%nickname_rq', '', $account->name);
        $account->name = str_replace('%nickname', '', $account->name);
      }

      $account->name = str_replace('  ', ' ', $account->name);

      $account->name = _vk_openapi_check_name($account->name);
      $array = array(
        'name' => $account->name,
        'pass' => user_password(),
        'status' => variable_get('user_register', 1),
        'vk_data' => $vk_data,
        'vk_show_unite_message' => TRUE,
        'mail' => $vkuid . '@vkontakte.ru',
      );

      if ($vk_data['vkontakte_avatar']) {
        $array['picture'] = $vk_data['vkontakte_avatar'];
      }

      if (!$user = user_save($account, $array)) {
        drupal_set_message(t('User create error'), 'error');
        print json_encode(array(
          'error' => TRUE,
          'exit_code' => '2',
          'message' => 'user create error [2]',
          'redirect_url' => variable_get('vk_openapi_redirect_url', "")
        ));
        exit();
      }

      if ($rid = variable_get('vk_openapi_role_for_new_user', 0)) {
        db_query("INSERT INTO {users_roles} (`uid`, `rid`) VALUES (%d, %d)", $user->uid, $rid);
      }

      if ($r->count == 0) {
        db_query("INSERT INTO {vkontakte_users} (`uid`, `vkuid`, `timestamp`) VALUES (%d, %d, %d)", $user->uid, $vkuid, time());
      }
      else {
        db_query("UPDATE {vkontakte_users} SET `uid` = %d, `timestamp` = %d WHERE vkuid = %d", $user->uid, time(), $vkuid);
      }
      drupal_set_message(t('New user @name successfully created. Now you should enter your e-mail', array('@name' => $user->name)));
      $newuser = TRUE;
      $conditions = legal_get_conditions($language->language);
      legal_save_accept($conditions['version'], $conditions['revision'], $conditions['language'], $user->uid);
    }
    else {

      $user = user_load(array('uid' => $r->uid));
      $user_data = unserialize($user->data);

      $existing_vk_data = $user_data['vk_data'];
      $vk_data = array_merge($existing_vk_data, $vk_data);

      $array = array('vk_data' => $vk_data);

      if ($avatar) {
        $array['picture'] = $avatar;
      }

      user_save($user, $array);
    }
    //if (!$newuser || !variable_get('vk_openapi_oblige_users_to_enter_email', 0)) {
    if (($user->mail && $user->mail != $vkuid . '@vk.com') || !variable_get('vk_openapi_oblige_users_to_enter_email', 0)) {
      $logged_in = user_external_login($user);
    }
    else {
      $_SESSION['vk_new_user'] = $user->uid;
    }


    $edit = (array) $account;

    user_module_invoke('register', $edit, $account);

    if (($user->mail && $user->mail != $vkuid . '@vk.com') || !variable_get('vk_openapi_oblige_users_to_enter_email', 0)) {

      if (!$newuser && $logged_in) {
        drupal_set_message(t('@name, you successfully logged in via vKontakte account.', array('@name' => $user->name)));
      }
      exit(json_encode(array(
        'error' => FALSE,
        'exit_code' => '4',
        'redirect_url' => variable_get('vk_openapi_redirect_url', "")
      )));
    }
    else {
      /*
      if (!$newuser) {
        drupal_set_message(t('You successfully logged in, but you should enter your e-mail.'));
      } else {
        if (variable_get('vk_openapi_allow_users_unite_accounts', 1)) {
          drupal_set_message(t('If you already have account you can <a href="@unite">unite their</a>', array('@unite' => url('vk/unite'))));
        }
      }
      exit(json_encode(array('error' => FALSE, 'exit_code' => '3', 'redirect_url' => variable_get('vk_openapi_redirect_url', ""))));
      */

      exit(json_encode(array('error' => FALSE, 'exit_code' => '3', 'redirect_url' => "vk/enter-e-mail")));
    }
  }
  else {
    exit(json_encode(array(
      'error' => TRUE,
      'exit_code' => '1',
      'message' => 'auth error [1]',
      'redirect_url' => variable_get('vk_openapi_redirect_url', "")
    )));
  }
}

/*function idevels_form_user_login_alter($form, $form_state) {
  $form['#attributes'] = array('class' => array('search-form'));
  $form['recover-password'] = array(
    '#value' => '<div id="recover-password" class="register"><a href = "/user/password">' . t('Forgot your password?') . '</a></div>',
    '#weight' => 100,
  );
  $form['register_mail'] = array(
    '#value' => '<div id="register-mail" class="register"><a href = "/user/register">' . t('Register') . '</a></div>',
    '#weight' => 100,
  );
}*/

/*function idevels_preprocess_views_view(&$view) {
  if ($view['name'] == 'question' && $view['display_id'] == 'block_2') {
    $view->title = 'bu';
    dsm($view);
  }
}*/

/**
 * Implementation of hook_views_pre_render().
 *
 * Add text for question views if empty.
 * Set titles for some views
 */
function idevels_views_pre_render(&$view) {
  if ($view->name == 'question' && $view->current_display == 'page_1') {
    // if (empty($view->result)) {
    $attachment = '<p class="empty-questions">' . t('Having problems with Drupal? Ask a question about the community!') . '</p>';
    $attachment .= '<span class="button ask">';
    $attachment .= l(t('Ask question'), 'node/add/question', array('attributes' => array('class' => 'button-helper helper')));
    $attachment .= '</span>';
    // $view->attachment_after = $attachment;
    // }
    $view->attachment_before = $attachment;
  }
  elseif ($view->name == 'Events' && $view->current_display == 'page_1') {
    drupal_set_title(t('Events'));
  }
  elseif ($view->name == 'Events' && $view->current_display == 'page_2') {
    drupal_set_title(t('Past Events'));
  }
  elseif ($view->name == 'vacations' && $view->current_display == 'page_1') {
    drupal_set_title(t('Vacations'));
  }
  elseif ($view->name == 'users_tracker' && $view->current_display == 'page_1') {
    drupal_set_title(t('Last activity'));
  }
  elseif ($view->name == 'users' && $view->current_display == 'page_1') {
    drupal_set_title(t('Users'));
  }
  elseif ($view->name == 'Resources' && $view->current_display == 'page_1') {
    drupal_set_title(t('Resources'));
  }
  elseif ($view->name == 'question' && $view->current_display == 'block_1') {
    drupal_set_title(t('Questions/Answers'));
  }
}

/**
 * Implementation of hook_form_alter()
 * Add Always show checbox for add access to link.
 **/
function idevels_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'menu_edit_item' || $form_id == 'og_menu_edit_item_form') {
    $form['menu']['always_visible'] = array(
      '#title' => t('Always show this menu item.'),
      '#type' => 'checkbox',
      '#weight' => '1',
      '#default_value' => $form['menu']['options']['#value']['always_visible'],
    );
    array_unshift($form['#submit'], 'idevels_menu_edit_form_submit');
  }
  if ($form_id == 'user_register') {
    $form['account']['#title'] = '';
    $form['simplenews']['#title'] = '';
    $form['account']['name']['#title'] = '';
    $form['account']['name']['#attributes']['placeholder'] = t('Username');
    $form['account']['mail']['#title'] = '';
    $form['account']['mail']['#attributes']['placeholder'] = t('Email');
  }
}

/**
 * Function submit .
 */
function idevels_menu_edit_form_submit($form, &$form_state) {
  $menu =& $form_state['values']['menu'];
  if ($menu['always_visible']) {
    $menu['options']['always_visible'] = 1;
    $menu['options']['alter'] = 1;
  }
  else {
    $menu['options']['always_visible'] = 0;
    $menu['options']['alter'] = 0;
  }
}

/**
 * Implementation of hook_translated_menu_link_alter().
 * Add access to link in menu.
 */
function idevels_translated_menu_link_alter(&$item, $map) {
  if ($item['options']['always_visible'] == TRUE) {
    $item['access'] = TRUE;
    $item['title'] = $item['link_title'];
    if (isset($item['localized_options']['attributes']['class'])) {
      $item['localized_options']['attributes']['class'] .= ' restricted';
    }
    else {
      $item['localized_options']['attributes']['class'] = 'restricted';
    }
  }
}

/**
 * Implementation of ctools hook_ctools_plugin_dierctory().
 *
 * Let the system know we implement widget plugins.
 */
function idevels_ctools_plugin_directory($module, $plugin) {
  if ($module == 'vud') {
    return $plugin;
  }
}

/**
 * Implementation of template_preprocess_views_view().
 * For exposed sort by carma or new users;
 */
function idevels_preprocess_views_view(&$vars) {
  if ($vars['view']->name == 'users') {
    if ($vars['view']->current_display == 'page_1') {
      $vars['header'] = t('Order By: ');
      $req = arg(2);
      if (empty($req)) {
        $reverse = 'asc';
        $revnew = 'asc';
      }
      switch (arg(1)) {
        case 'votingapi_cache_users_value':
          if (arg(2) == 'desc') {
            $reverse = 'asc';
            $class = 'karma down';

          }else {
            $reverse = 'desc';
            $class = 'karma up';
          }
          break;
        case 'users_created_day':
          if (arg(2) == 'desc') {
            $revnew = 'asc';
            $classNew = 'karma down';
          }else {
            $revnew = 'desc';
            $classNew = 'karma up';
          }
          break;
      }
        $vars['header'] .=  l(t('karma'), 'users-lists/votingapi_cache_users_value/'.$reverse, array('attributes'=>array('class'=>$class)));
        $vars['header'] .= l(t('new user'), 'users-lists/users_created_day/'.$revnew, array('attributes'=>array('class'=>$classNew)));
    }
  }
  // Modal link to resources 
  elseif ($vars['view']->name == 'Resources') {
    if ($vars['view']->current_display == 'page_1') {
      if ( user_is_logged_in() ) {
        ctools_include('node.pages', 'node', '');
        ctools_include('modal');
        ctools_include('ajax');
        ctools_modal_add_js();
        $header = $vars['header'];
        $start = strrpos($header,"<a");
        $finish = strrpos($header,"/a>");
        $link = l(t('Add content'), "add/nojs/resource", array('html' => TRUE, 'attributes' => array('class' => "ctools-use-modal")));
        $header = substr($header, 0, $start) . $link . substr($header, $finish+3, strlen($header));
        $vars['header'] = $header;
      }
    }
  }
}

/**
 * Implementation of template_preprocess_views_view_fields().
 * For create country flags in users-lists page.
 */
function idevels_preprocess_views_view_fields(&$vars) {
  if ($vars['view']->name == 'users') {
    if ($vars['view']->current_display == 'page_1') {
      if ($vars['fields']['nothing']->content != ' ') {
        $country = $vars['fields']['country']->raw;
        $path = drupal_get_path('module', 'idevels') . '/img/' . $country . '.png';
        $image = theme('image', $path, $country, $country);
        $vars['fields']['nothing']->content = $image . $vars['fields']['nothing']->content;
      }
      $vars['fields']['country']->content = '';
      $vars['fields']['city']->content = '';
    }
  }
  elseif ($vars['view']->name == 'Events' OR $vars['view']->name == 'vacations') {
    if ($vars['view']->current_display == 'page_1' OR $vars['view']->current_display == 'panel_pane_1' OR $vars['view']->current_display == 'page_2') {
      if ($vars['fields']['nothing']->content != ' ') {
        $countries = array(
          'Україна' => 'ua',
          'Азербайджан' => 'az',
          'Білорусь' => 'by',
          'Вірменія' => 'am',
          'Казахстан' => 'kz',
          'Киргизія' => 'kg',
          'Молдова' => 'md',
          'Росія' => 'ru',
          'Таджикістан' => 'tj',
          'Узбекистан' => 'uz',
        );
        if (isset($vars['fields']['field_city_value']) OR isset($vars['fields']['field_cities_value'])) {
          if (isset($vars['fields']['field_city_value'])) {
            $city = 'field_city_value';
          }
          else {
            $city = 'field_cities_value';
          }
          $country = $vars['fields'][$city]->content;
          $country = substr($country, strpos($country, ', '));
          $country = substr($country, 2, strpos($country, '"')-2);
          $country = $countries[$country];
          $path = drupal_get_path('module', 'idevels') . '/img/' . $country . '.png';
          $image = theme('image', $path, $country, $country);
          $vars['fields'][$city]->content = $image . $vars['fields'][$city]->content;
        }
      }
    }
  }
}

/**
 * Implementation of hook_views_query_alter().
 * For exposed sort by carma or new users;
 */
function idevels_views_query_alter(&$view, &$query) {
  if ($view->name == 'users') {
    switch (arg(1)) {
      case 'votingapi_cache_users_value':
        if (arg(2) == 'asc') {
          $direction = 'ASC';
        }else {
          $direction = 'DESC';
        }
        $query->orderby[0] = 'votingapi_cache_users_value '.$direction;
        break;
      case 'users_created_day':
        if (arg(2) == 'asc') {
          $direction = 'ASC';
        }else {
          $direction = 'DESC';
        }
        $query->orderby[0] = 'users_created_day '.$direction;
        break;
    }
  }
}

/**
 * Implementation of hook_form_views_exposed_form_alter().
 * For cities autocomplate;
 */
function idevels_form_views_exposed_form_alter(&$form, &$form_state) {
  if (($form_state['view']->name == 'Events' AND $form['#id'] == 'views-exposed-form-Events-page-1') OR
      ($form_state['view']->name == 'Events' AND $form['#id'] == 'views-exposed-form-Events-page-2') OR
      ($form_state['view']->name == 'vacations' AND $form['#id'] == 'views-exposed-form-vacations-page-1')) {
    if (isset($form['city'])) {
      $city = 'city';
    }
    else {
      $city = 'field_cities_value';
    }
    $form[$city]['#type'] = 'textfield';
    $form[$city]['#default_value'] = '';
    $form[$city]['#size'] = 30;
    unset($form[$city]['#options']);
    if ($form_state['input'][$city] == 'All') {
      $form_state['input'][$city] = '';
    }
    $form[$city]['#autocomplete_path'] = 'idevels-taxonomy/autocomplete/11';
    $form['#validate'][] = 'idevels_cities_autocomplete_validate';
  }
}

/**
 * Implementation of hook_form_validate().
 * For cities autocomplate;
 */
function idevels_cities_autocomplete_validate(&$form, &$form_state) {
  if (isset($form_state['values']['city']) AND $form_state['values']['city'] != 'All') {
    $form_state['values']['city'] = str_replace('"', "", $form_state['values']['city']);
    $temp_array = taxonomy_get_term_by_name($form_state['values']['city']);
    $form_state['values']['city'] = $temp_array[0]->tid;
  }
}

function idevels_change_header_image_form(&$form_state) {
  $form = array();  
  $form['file'] = array(
    '#attributes' => array('enctype' => 'multipart/form-data'),
    '#type' => 'file',
    '#title' => t('Image'),
    '#description' => t('Image should be of minimum 50x50px width and should be of type png or jpg'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#size' => 48,
  );
  $form['#attributes']['enctype'] = "multipart/form-data";
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',   
  );
  return $form;
}

function idevels_change_header_image_form_validate($form, $form_state) {
  if (!($file = file_save_upload('file', array()))) {
    form_set_error('file', t('Please choose file'));
  }
  elseif (file_validate_is_image($file)) {
    form_set_error('file', t('Please choose image'));
  }
  elseif ($file->filesize > 512000) {
    form_set_error('file', t("File can't be more than 512kb"));
  }
}

function idevels_change_header_image_form_submit($form, &$form_state) {
  $file = file_save_upload('file', array());
  file_put_contents('sites/all/themes/idevels/images/map.png', file_get_contents($file->filepath));
  $form_state['redirect'] = '';
}

/**
 * Implementation of ctools Modal API.
 * For add Resurses;
 */
function examples_ctools_modal_review($js = FALSE) {
  $form_id = 'user_login';
  if (!$js) {
    return drupal_get_form($form_id);
  }
  ctools_include('node.pages', 'node', '');
  ctools_include('modal');
  ctools_include('ajax');
  ctools_modal_add_js();
  //global $user;
  //$type = 'resurses';
/*  $node = (object) array(
    'uid' => $user->uid,  
    'name' => (isset($user->name) ? $user->name : ''),  
    'type' => $type,  
    'language' => LANGUAGE_NONE);*/
  // Loading node form with disabled scripts.
  //if (!$js) {
    //return drupal_get_form('resource_node_form'/*, $node*/);
  //}
  // Create array $form_state.
  $form_state = array(
   'title' => t('Add content'),
   'ajax'  => TRUE,
  );
  //$form_state['build_info']['args'] = array($node);
  //$output = ctools_modal_form_wrapper(drupal_get_form('resource_node_form'), $form_state);
  $output = ctools_modal_form_wrapper('idevels_add_resurses_form', $form_state);
  //$output = ctools_modal_form_wrapper('resource_node_form', $form_state);
  // Actions after form submit. 
  if (!empty($form_state['executed'])) {
    $output = array();
    // Close pop up.
    $output[] = ctools_modal_command_dismiss();
    $news_id = arg(3);
    // Insert  updated  view into a  page.
    if (is_numeric(arg(3))) {
     $output[] = ajax_command_html('.latest-reviews-full-style ', views_embed_view('reviews', 'block', arg(3)));
    }
  }
  print ctools_ajax_render($output);
}

function idevels_add_resurses_form(&$form_state) {
  /*$form_state['redirect'] = 'resources';*/
  $form = array();
  $form['taxonomy[12]'] = array(
    '#type' => 'radios',
    '#title' => t('Select the type of material you want to add'),
    2491 => array(
      '#type' => 'radio',
      '#title' => t('Book'),
      '#return_value' => 2491,
      '#parents' => array('resource_type'),
      '#spawned' => TRUE,
      '#default_value' => 2491,
    ),
    2492 => array(
      '#type' => 'radio',
      '#title' => t('Article'),
      '#return_value' => 2492,
      '#parents' => array('resource_type'),
      '#spawned' => TRUE,
    ),
    2493 => array(
      '#type' => 'radio',
      '#title' => t('Site'),
      '#return_value' => 2493,
      '#parents' => array('resource_type'),
      '#spawned' => TRUE,
    ),
    2494 => array(
      '#type' => 'radio',
      '#title' => t('Link'),
      '#return_value' => 2494,
      '#parents' => array('resource_type'),
      '#spawned' => TRUE,
    ),
  );
  //name="title" id="edit-title"
  $form['title'] = array(
    '#type' => 'textfield',
    '#attributes' =>array('placeholder' => t('Name of book')),
    '#size' => 60,
    '#required' => TRUE,
  );
  $form['field_link'] = array(
    '#type' => 'textfield',
    '#attributes' =>array('placeholder' => t('Author of the book')),
    '#size' => 60,
  );
  $form['body'] = array(
    '#type' => 'textarea',
    '#attributes' =>array('placeholder' => t('About this')),
    '#rows' => 7,
    '#cols' => 60,
    '#required' => TRUE,
  );
  $form['field_book_0'] = array(
    '#attributes' => array('enctype' => 'multipart/form-data'),
    '#type' => 'file',
    '#title' => t('Download book'),
/*    '#upload_validators' => array(
      'file_validate_extensions' => array('txt pdf mobi epub doc docx fb2 ibooks djvu rtf lit html htm chm'),
      'file_validate_size' => array(100*1024*1024),
    ),*/
    '#size' => 48,
  );
  $form['#attributes']['enctype'] = "multipart/form-data";
  $form['#validate'][] = 'idevels_add_resurses_form_validate';
/*  $form['#attached']['js'] = array(
    drupal_get_path('module', 'idevels') . '/formdecorator.js',
  );*/
  $form['#after_build'][] = '_load_my_javascript';
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Add'), 
  );
  return $form;
}

function _load_my_javascript($element){
  drupal_add_js(
    drupal_get_path('module', 'idevels') . '/formdecorator.js'
  );
  return($element);
}

function idevels_add_resurses_form_validate($form, &$form_state) {
  if ($form_state['values']['resource_type'] == '2491') {
    $extensions = array('txt', 'pdf', 'mobi', 'epub', 'doc', 'docx', 'fb2', 'ibooks', 'djvu', 'rtf', 'lit', 'html', 'htm', 'chm');
    if (!($file = file_save_upload('field_book_0', array(), file_directory_path() . '/books'))) {
      form_set_error('field_book_0', t('Please choose file'));
    }
    elseif (!in_array(pathinfo($file->filepath, PATHINFO_EXTENSION), $extensions) OR !in_array(end(explode(".", $file->filename)), $extensions) OR substr($file->filename, -5, 5) == '_.txt') {
      file_delete($file->filepath);
      form_set_error('field_book_0', t('File extensions not allowed'));
    }
    elseif ($file->filesize > 20000000) {
      file_delete($file->filepath);
      form_set_error('field_book_0', t("File can't be more than 20Mb"));
    }
  }
}

function idevels_add_resurses_form_submit($form, &$form_state) {
  global $user;
  module_load_include('inc', 'node', 'taxonomy', 'node.pages'); // required
  $tid = (int) $form_state['values']['resource_type'];
  $file = file_save_upload('field_book_0');
  $node = (object) array(
    'type' => 'resource',
    'uid' => $user->uid,
    'name' => (isset($user->name) ? $user->name : ''),
    'title' => $form_state['input']['title'],
    'body' => $form_state['input']['body'],
    'teaser' => $form_state['input']['body'],
    'taxonomy' => array($tid => (object) taxonomy_get_term($tid)),
  );
  if ($form_state['values']['resource_type'] == '2491') {
    $node->field_book_autor = array(0 => array('value' => $form_state['input']['field_link']));
    $node->field_book = array(0 => (array) $file);
  }
  else {
    $node->field_link = array(0 => array('url' => $form_state['input']['field_link']));
  }
  node_object_prepare($node);
  node_save($node);
  $output = array();
  $output[] = ctools_modal_command_dismiss();
  $output[] = ctools_ajax_command_redirect('resources');
  print ctools_ajax_render($output);
}

function idevels_init() {
  $path=request_uri();
  if ($path=='/node/add/question' ||$path=='/node/add/question/-'){
  $path = trim($path, '/');
  $breadcrumb = array();
  $breadcrumb[] = l(t('Home'), '<front>');
  $breadcrumb[] = l(t('Ask a questions'), $path); // Link to current URL
// Set Breadcrumbs
  drupal_set_breadcrumb($breadcrumb);
  }
}
