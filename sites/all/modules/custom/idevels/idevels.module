<?php
/**
 * files module idevels.
 */

/**
 * Implementation of hook_menu_alter().
 */
function idevels_menu_alter(&$items) {
  $items['vk/login']['page callback'] = 'idevels_vk_login';
  $items['node']['access callback'] = FALSE;
}

/**
 * Implements hook_menu().
 */
function idevels_menu() {
  $items['idevels-taxonomy/autocomplete'] = array(
    'title' => 'Autocomplete taxonomy',
    'page callback' => 'idevels_taxonomy_autocomplete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Custom autocomplete for cities
 */
function idevels_taxonomy_autocomplete($vid, $string = '') {
  // The user enters a comma-separated list of tags. We only autocomplete the last tag.
  $array = drupal_explode_tags($string);

  // Fetch last tag
  $last_string = trim(array_pop($array));
  $matches = array();
  if ($last_string != '') {
    $result = db_query_range(db_rewrite_sql("SELECT t.tid, t.name FROM {term_data} t WHERE t.vid = %d AND LOWER(t.name) LIKE LOWER('%%%s%%')", 't', 'tid'), $vid, $last_string, 0, 10);

    $prefix = count($array) ? implode(', ', $array) .', ' : '';

    while ($tag = db_fetch_object($result)) {
      $n = $tag->name;
      // Commas and quotes in terms are special cases, so encode 'em.
      if (strpos($tag->name, ',') !== FALSE || strpos($tag->name, '"') !== FALSE) {
        $n = str_replace('"', '""', $tag->name);
      }
      $matches[$prefix . $n] = check_plain($tag->name);
    }
  }

  drupal_json($matches);
}

function idevels_vk_login() {
  global $language;
  $member = authOpenAPIMember();

  if ($member !== FALSE) {
    $vkuid = $_POST['uid'];
    $vk_data = _vk_get_user_data($vkuid);
    $vk_data['last_update'] = time();

    $r = db_fetch_object(db_query("SELECT uid FROM {vkontakte_users} WHERE vkuid = %d", $vkuid));
    $newuser = FALSE;
    if (!$r->uid) {
      $vk_data['confirmed'] = FALSE;
      // create new user
      $account = new stdClass();

      $account->name = variable_get('vk_openapi_username', '%first_name %last_name_lq%nickname%last_name_rq %last_name');
      $account->name = str_replace('%first_name', $vk_data['first_name'], $account->name);
      $account->name = str_replace('%last_name', $vk_data['last_name'], $account->name);
      if (mb_strlen($nickname)) {
        $account->name = str_replace('%nickname_lq', variable_get('vk_openapi_nickname_lq', '«'), $account->name);
        $account->name = str_replace('%nickname_rq', variable_get('vk_openapi_nickname_rq', '»'), $account->name);
        $account->name = str_replace('%nickname', $vk_data['nickname'], $account->name);
      }
      else {
        $account->name = str_replace('%nickname_lq', '', $account->name);
        $account->name = str_replace('%nickname_rq', '', $account->name);
        $account->name = str_replace('%nickname', '', $account->name);
      }

      $account->name = str_replace('  ', ' ', $account->name);

      $account->name = _vk_openapi_check_name($account->name);
      $array = array(
        'name' => $account->name,
        'pass' => user_password(),
        'status' => variable_get('user_register', 1),
        'vk_data' => $vk_data,
        'vk_show_unite_message' => TRUE,
        'mail' => $vkuid . '@vkontakte.ru',
      );

      if ($vk_data['vkontakte_avatar']) {
        $array['picture'] = $vk_data['vkontakte_avatar'];
      }

      if (!$user = user_save($account, $array)) {
        drupal_set_message(t('User create error'), 'error');
        print json_encode(array(
          'error' => TRUE,
          'exit_code' => '2',
          'message' => 'user create error [2]',
          'redirect_url' => variable_get('vk_openapi_redirect_url', "")
        ));
        exit();
      }

      if ($rid = variable_get('vk_openapi_role_for_new_user', 0)) {
        db_query("INSERT INTO {users_roles} (`uid`, `rid`) VALUES (%d, %d)", $user->uid, $rid);
      }

      if ($r->count == 0) {
        db_query("INSERT INTO {vkontakte_users} (`uid`, `vkuid`, `timestamp`) VALUES (%d, %d, %d)", $user->uid, $vkuid, time());
      }
      else {
        db_query("UPDATE {vkontakte_users} SET `uid` = %d, `timestamp` = %d WHERE vkuid = %d", $user->uid, time(), $vkuid);
      }
      drupal_set_message(t('New user @name successfully created. Now you should enter your e-mail', array('@name' => $user->name)));
      $newuser = TRUE;
      $conditions = legal_get_conditions($language->language);
      legal_save_accept($conditions['version'], $conditions['revision'], $conditions['language'], $user->uid);
    }
    else {

      $user = user_load(array('uid' => $r->uid));
      $user_data = unserialize($user->data);

      $existing_vk_data = $user_data['vk_data'];
      $vk_data = array_merge($existing_vk_data, $vk_data);

      $array = array('vk_data' => $vk_data);

      if ($avatar) {
        $array['picture'] = $avatar;
      }

      user_save($user, $array);
    }
    //if (!$newuser || !variable_get('vk_openapi_oblige_users_to_enter_email', 0)) {
    if (($user->mail && $user->mail != $vkuid . '@vk.com') || !variable_get('vk_openapi_oblige_users_to_enter_email', 0)) {
      $logged_in = user_external_login($user);
    }
    else {
      $_SESSION['vk_new_user'] = $user->uid;
    }


    $edit = (array) $account;

    user_module_invoke('register', $edit, $account);

    if (($user->mail && $user->mail != $vkuid . '@vk.com') || !variable_get('vk_openapi_oblige_users_to_enter_email', 0)) {

      if (!$newuser && $logged_in) {
        drupal_set_message(t('@name, you successfully logged in via vKontakte account.', array('@name' => $user->name)));
      }
      exit(json_encode(array(
        'error' => FALSE,
        'exit_code' => '4',
        'redirect_url' => variable_get('vk_openapi_redirect_url', "")
      )));
    }
    else {
      /*
      if (!$newuser) {
        drupal_set_message(t('You successfully logged in, but you should enter your e-mail.'));
      } else {
        if (variable_get('vk_openapi_allow_users_unite_accounts', 1)) {
          drupal_set_message(t('If you already have account you can <a href="@unite">unite their</a>', array('@unite' => url('vk/unite'))));
        }
      }
      exit(json_encode(array('error' => FALSE, 'exit_code' => '3', 'redirect_url' => variable_get('vk_openapi_redirect_url', ""))));
      */

      exit(json_encode(array('error' => FALSE, 'exit_code' => '3', 'redirect_url' => "vk/enter-e-mail")));
    }
  }
  else {
    exit(json_encode(array(
      'error' => TRUE,
      'exit_code' => '1',
      'message' => 'auth error [1]',
      'redirect_url' => variable_get('vk_openapi_redirect_url', "")
    )));
  }
}

/*function idevels_form_user_login_alter($form, $form_state) {
  $form['#attributes'] = array('class' => array('search-form'));
  $form['recover-password'] = array(
    '#value' => '<div id="recover-password" class="register"><a href = "/user/password">' . t('Forgot your password?') . '</a></div>',
    '#weight' => 100,
  );
  $form['register_mail'] = array(
    '#value' => '<div id="register-mail" class="register"><a href = "/user/register">' . t('Register') . '</a></div>',
    '#weight' => 100,
  );
}*/

/*function idevels_preprocess_views_view(&$view) {
  if ($view['name'] == 'question' && $view['display_id'] == 'block_2') {
    $view->title = 'bu';
    dsm($view);
  }
}*/

/**
 * Implementation of hook_views_pre_render().
 *
 * Add text for question views if empty.
 * Set titles for some views
 */
function idevels_views_pre_render(&$view) {
  if ($view->name == 'question' && $view->current_display == 'page_1') {
    // if (empty($view->result)) {
    $attachment = '<p class="empty-questions">' . t('Having problems with Drupal? Ask a question about the community!') . '</p>';
    $attachment .= '<span class="button ask">';
    $attachment .= l(t('Ask question'), 'node/add/helper', array('attributes' => array('class' => 'button-helper helper')));
    $attachment .= '</span>';
    // $view->attachment_after = $attachment;
    // }
    $view->attachment_before = $attachment;
  }
  elseif ($view->name == 'Events' && $view->current_display == 'page_1') {
    drupal_set_title(t('Events'));
  }
  elseif ($view->name == 'vacations' && $view->current_display == 'page_1') {
    drupal_set_title(t('Vacations'));
  }
  elseif ($view->name == 'users_tracker' && $view->current_display == 'page_1') {
    drupal_set_title(t('Last activity'));
  }
}

/**
 * Implementation of hook_form_alter()
 * Add Always show checbox for add access to link.
 **/
function idevels_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'menu_edit_item' || $form_id == 'og_menu_edit_item_form') {
    $form['menu']['always_visible'] = array(
      '#title' => t('Always show this menu item.'),
      '#type' => 'checkbox',
      '#weight' => '1',
      '#default_value' => $form['menu']['options']['#value']['always_visible'],
    );
    array_unshift($form['#submit'], 'idevels_menu_edit_form_submit');
  }
}

/**
 * Function submit .
 */
function idevels_menu_edit_form_submit($form, &$form_state) {
  $menu =& $form_state['values']['menu'];
  if ($menu['always_visible']) {
    $menu['options']['always_visible'] = 1;
    $menu['options']['alter'] = 1;
  }
  else {
    $menu['options']['always_visible'] = 0;
    $menu['options']['alter'] = 0;
  }
}

/**
 * Implementation of hook_translated_menu_link_alter().
 * Add access to link in menu.
 */
function idevels_translated_menu_link_alter(&$item, $map) {
  if ($item['options']['always_visible'] == TRUE) {
    $item['access'] = TRUE;
    $item['title'] = $item['link_title'];
    if (isset($item['localized_options']['attributes']['class'])) {
      $item['localized_options']['attributes']['class'] .= ' restricted';
    }
    else {
      $item['localized_options']['attributes']['class'] = 'restricted';
    }
  }
}

/**
 * Implementation of ctools hook_ctools_plugin_dierctory().
 *
 * Let the system know we implement widget plugins.
 */
function idevels_ctools_plugin_directory($module, $plugin) {
  if ($module == 'vud') {
    return $plugin;
  }
}

/**
 * Implementation of template_preprocess_views_view().
 * For exposed sort by carma or new users;
 */
function idevels_preprocess_views_view(&$vars) {
  if ($vars['view']->name == 'users') {
    if ($vars['view']->current_display == 'page_1') {
      $vars['header'] = t('Order By: ');
      $req = arg(2);
      if (empty($req)) {
        $reverse = 'asc';
        $revnew = 'asc';
      }
      switch (arg(1)) {
        case 'votingapi_cache_users_value':
          if (arg(2) == 'desc') {
            $reverse = 'asc';
            $class = 'karma down';

          }else {
            $reverse = 'desc';
            $class = 'karma up';
          }
          break;
        case 'users_created_day':
          if (arg(2) == 'desc') {
            $revnew = 'asc';
            $classNew = 'karma down';
          }else {
            $revnew = 'desc';
            $classNew = 'karma up';
          }
          break;
      }
        $vars['header'] .=  l(t('karma'), 'users-lists/votingapi_cache_users_value/'.$reverse, array('attributes'=>array('class'=>$class)));
        $vars['header'] .= l(t('new user'), 'users-lists/users_created_day/'.$revnew, array('attributes'=>array('class'=>$classNew)));
    }
  }
}

/**
 * Implementation of template_preprocess_views_view_fields().
 * For create country flags in users-lists page.
 */
function idevels_preprocess_views_view_fields(&$vars) {
  if ($vars['view']->name == 'users') {
    if ($vars['view']->current_display == 'page_1') {
      if ($vars['fields']['nothing']->content != ' ') {
        $country = $vars['fields']['country']->raw;
        $path = drupal_get_path('module', 'idevels') . '/img/' . $country . '.png';
        $image = theme('image', $path, $country, $country);
        $vars['fields']['nothing']->content = $image . $vars['fields']['nothing']->content;
      }
      $vars['fields']['country']->content = '';
      $vars['fields']['city']->content = '';
    }
  }
  elseif ($vars['view']->name == 'Events' OR $vars['view']->name == 'vacations') {
    if ($vars['view']->current_display == 'page_1') {
      if ($vars['fields']['nothing']->content != ' ') {
        $countries = array(
          'Україна' => 'ua',
          'Азербайджан' => 'az',
          'Білорусь' => 'by',
          'Вірменія' => 'am',
          'Казахстан' => 'kz',
          'Киргизія' => 'kg',
          'Молдова' => 'md',
          'Росія' => 'ru',
          'Таджикістан' => 'tj',
          'Узбекистан' => 'uz',
        );
        if (isset($vars['fields']['field_city_value']) OR isset($vars['fields']['field_cities_value'])) {
          if (isset($vars['fields']['field_city_value'])) {
            $city = 'field_city_value';
          }
          else {
            $city = 'field_cities_value';
          }
          $country = $vars['fields'][$city]->content;
          $country = substr($country, strpos($country, ', '));
          $country = substr($country, 2, strpos($country, '"')-2);
          $country = $countries[$country];
          $path = drupal_get_path('module', 'idevels') . '/img/' . $country . '.png';
          $image = theme('image', $path, $country, $country);
          $vars['fields'][$city]->content = $image . $vars['fields'][$city]->content;
        }
      }
    }
  }
}

/**
 * Implementation of hook_views_query_alter().
 * For exposed sort by carma or new users;
 */
function idevels_views_query_alter(&$view, &$query) {
  if ($view->name == 'users') {
    switch (arg(1)) {
      case 'votingapi_cache_users_value':
        if (arg(2) == 'asc') {
          $direction = 'ASC';
        }else {
          $direction = 'DESC';
        }
        $query->orderby[0] = 'votingapi_cache_users_value '.$direction;
        break;
      case 'users_created_day':
        if (arg(2) == 'asc') {
          $direction = 'ASC';
        }else {
          $direction = 'DESC';
        }
        $query->orderby[0] = 'users_created_day '.$direction;
        break;
    }
  }
}

function idevels_form_views_exposed_form_alter(&$form, &$form_state) {
  if (($form_state['view']->name == 'Events' AND $form['#id'] == 'views-exposed-form-Events-page-1') OR
      ($form_state['view']->name == 'vacations' AND $form['#id'] == 'views-exposed-form-vacations-page-1')) {
    if (isset($form['city'])) {
      $city = 'city';
    }
    else {
      $city = 'field_cities_value';
    }
    $form[$city]['#type'] = 'textfield';
    $form[$city]['#default_value'] = '';
    $form[$city]['#size'] = 30;
    unset($form[$city]['#options']);
    if ($form_state['input'][$city] == 'All') {
      $form_state['input'][$city] = '';
    }
    $form[$city]['#autocomplete_path'] = 'idevels-taxonomy/autocomplete/11';
    $form['#validate'][] = 'idevels_cities_autocomplete_validate';
  }
}

function idevels_cities_autocomplete_validate(&$form, &$form_state) {
  if (isset($form_state['values']['city']) AND $form_state['values']['city'] != 'All') {
    $form_state['values']['city'] = str_replace('"', "", $form_state['values']['city']);
    $temp_array = taxonomy_get_term_by_name($form_state['values']['city']);
    $form_state['values']['city'] = $temp_array[0]->tid;
  }
}
