<?php
// $Id$
/**
 * @file
 * Sending letters through Mail Edit (Drupal API). Messaging method plug-in
 */


// Include messaging mail library
require_once drupal_get_path('module', 'messaging') . '/messaging.mail.inc';


if (module_exists('mail_edit')) {
  $path = drupal_get_path('module', 'messaging_mail_edit');
  if (module_exists('simplenews')) {
    require_once("$path/messaging_mail_edit.inc");
  }
}


/**
 * Implementation of hook_messaging()
 * 
 * Currently the only operation supported is 'send methods' that will retrieve and array
 * with information fo the sending methods provided by this module.
 * 
 * @param $op
 *   Type of information to retrieve.
 * @return mixed
 *   Depending on $op   
 */
function messaging_mail_edit_messaging($op = 'info') {
  switch($op) {
    case 'send methods':
      $info = array();
      $info['e_mail'] = array(
        'title' => 'E-mail',
        'name' => t('E-mail'),
        'group' => 'mail',
        'destination' => 'mail',
        'type' => MESSAGING_TYPE_SEND,
        'glue' => "<br>",
        'footer' => "<br><br>--",
        'description' => t('Send e-mails using the default Drupal mail library.'),
        'send callback' => 'messaging_mail_edit_send_msg',
      );
      return $info;  
  }
}


/**
 * Send mail message to user account
 * 
 * This is a callback function that will be invoked from messaging delivery methods
 * 
 * @see messaging_message_send()
 * @see drupal_mail()
 * 
 * @param $destination
 *   Single email address
 * @param $message
 *   Message array
 * @param $params
 *   Optional parameters for this method type
 */
function messaging_mail_edit_send_msg($destination, $message, $params = array()) {
  // The message 'from' will depend on message sender if present, otherwise default to site mail
  $default_from = variable_get('site_mail', ini_get('sendmail_from'));
  
  if (empty($params['from'])) {
    if (!empty($message->sender_account) && !empty($message->sender_account->mail)) {
      $from_format = variable_get('messaging_sender_name', '[user]') .' <'.
        variable_get('messaging_sender_mail', '[mail]') .'>';
      $from = token_replace($from_format, 'user', $message->sender_account);
    }
    elseif (!empty($message->sender_name) && $default_from) {
      $from = token_replace('[user]', 'user', $message->sender_account) .' <'. $default_from .'>';
    }
    else {
      $from = $default_from;
    }
    $params['from'] = $from;
  }
  else {
    $from = $params['from'];
  }

  $params['returnpath'] = token_replace(variable_get('messaging_returnpath_mail', '[site-mail]'),
    'user', $message->sender_account
  );
  
  $o_group = FALSE;
  $body_text_br = '';
  $body_teaser_br = '';
  foreach ($message->events as $sid => $event) {
    $subscription = notifications_load_subscription($sid);
    $actions_text = '';
    $actions_teaser = '';
    if (!isset($event->objects['node']) || empty($event->objects['node'])) {
      continue;
    }
    switch ($event->action) {
      case 'insert': 
        $actions_text = t('Create content — !link', array('!link' =>
          l($event->objects['node']->title, 'node/'. $event->objects['node']->nid)));
        $actions_teaser = node_view($event->objects['node'], TRUE);
        break;
      case 'comment':
        if (isset($event->objects['comment']) && !empty($event->objects['comment'])) {
          $actions_text = t('Added comment — !link', array('!link' =>
            l($event->objects['node']->title,
              'node/'. $event->objects['node']->nid,
              array('fragment' => 'comment-'. $event->objects['comment']->cid))
             )
          );
          $actions_teaser = l($event->objects['node']->title,
            'node/'. $event->objects['node']->nid,
            array('fragment' => 'comment-'. $event->objects['comment']->cid)
            ) ."<br />\n". check_markup($event->objects['comment']->comment,
            $event->objects['comment']->format, FALSE);
        }
        else {
          $actions_text = t('Added comment — !link', array('!link' =>
            l($event->objects['node']->title, 'node/'. $event->objects['node']->nid)));
          $actions_teaser = node_view($event->objects['node'], TRUE);
        }
        break;
      default:
        $actions_text = t('Content updated — !link', array('!link' =>
          l($event->objects['node']->title, 'node/'. $event->objects['node']->nid)));
        $actions_teaser = node_view($event->objects['node'], TRUE);
    }
    $body_text_br .= $actions_text ."<br />\n";
    $body_teaser_br .= $actions_teaser ."<br />\n<br />\n";
    if (!$o_group && isset($event->objects['node']->og_groups)) {
      foreach ($event->objects['node']->og_groups as $gid => $value) {
        $o_group = node_load($gid);
        break;
      }
    }
  }
  
  $params['message_tokens'] = array(
  	'!uid' => $message->account->uid,
    '!username' => $message->account->name,
    '!username_themed' => strip_tags(theme('username', $message->account, array('plain' => TRUE))),
    '!user_profile_edit_subscription' => l('Edit subsription', 'user/'. $message->account->uid .'/edit/newsletter'),
    '!group_name' => isset($o_group->title) ? check_plain($o_group->title) : t('Group is not set'),
    '!group_title_url' => isset($o_group->title) ? l($o_group->title, 'node/'. $o_group->nid) : t('Group is not set'),
    '!events_node_title_urls_br' => $body_text_br,
    '!events_node_teaser_url_br' => $body_teaser_br,
  );

  // Build the mail object, mimic drupal_mail() format
  $mail = array(
    'id' => 'messaging_mail_edit_messaging_'. (!empty($message->type) ? $message->type : 'message'),
    'to' => $destination,
    'from' => $from,
    'language' => !empty($message->language) ? $message->language : language_default(),
    'params' => $params,
    'subject' => $message->subject,
    'body' => $message->body,
    'headers' => messaging_mail_headers($message, $params),
    'attachments' => !empty($message->files) ? $message->files : array(),
  );
  if (isset($message->digest) && !empty($message->digest)) {
    $mail['id'] .= '-digest-'. $message->digest;
  }
  
  drupal_alter('mail', $mail);

  if (is_array($mail['body'])) {
    $mail['body'] = $mail['body'][0];
  }
  return mimemail($mail['from'], $mail['to'], $mail['subject'], $mail['body'],
    NULL, $mail['headers'], NULL, $mail['attachments'], '');
}


/**
 * Implementation of hook_disable()
 */
function messaging_mail_edit_disable() {
  messaging_method_disable('e_mail');
}
