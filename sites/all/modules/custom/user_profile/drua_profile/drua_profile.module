<?php
// $Id$

/**
 * Implementation of hook_theme().
 */
function drua_profile_theme() {
  return array(
    'drua_block_about' => array('arguments' => array('str' => NULL, 'link' => '')),
    'drua_block_contacts' => array('arguments' => array('fields' => NULL, 'link' => '')),
    'drua_block_avatar_block' => array('arguments' => array('user_data' => NULL)),
    'drua_block_avatar' => array('arguments' => array('photo' => '', 'uid_profile' => FALSE, )),
    'drua_block_medals' => array('arguments' => array('medals' => NULL)),
    'drua_block_status' => array('arguments' => array('status' => FALSE)),
    'drua_block_drupal_active' => array('arguments' => array('user_data' => NULL)),
    'drua_block_domen_active' => array('arguments' => array('data' => NULL)),
  
    'drua_block_karma' => array(
      'arguments' => array(
      'karma_value' => NULL,
      'change_karma' => FALSE 
      )
    ),
    
    'drua_block_top' => array('arguments' => array('top_value' => NULL)),
  );
}


/**
 * Implementation of hook_views_api().
 */
function drua_profile_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'drua_profile'),
  );
}

/**
 *  Implements hook_menu().
 */
function drua_profile_menu() {
  $items['user/%user_category/edit/password'] = array(
    'title'           => 'Password',
    'description'     => 'A form to change user password.',
    'page callback'   => 'drupal_get_form',
    'type'            => MENU_LOCAL_TASK,
    'page arguments'  => array('drua_profile_change_password'),
    'access callback' => 'drua_profile_tab',
    'load arguments' => array('%map', '%index'),
    'weight'          => 20,
  );
  $items['user/%user_category/edit/email'] = array(
    'title'           => 'Email',
    'description'     => 'A form to change user email.',
    'page callback'   => 'drupal_get_form',
    'type'            => MENU_LOCAL_TASK,
    'page arguments'  => array('drua_profile_change_email'),
    'access callback' => 'drua_profile_tab',
    'load arguments' => array('%map', '%index'),
    'weight'          => 19,
  );
  $items['user/%/mail/%'] = array(
    'title'           => 'Email check',
    'description'     => 'A page to check hash and change user email.',
    'page callback'   => 'drua_profile_checknewmail',
    'access callback' => TRUE,
    'type'            => MENU_CALLBACK,
  );

  return $items;
}

/**
 *  Implements hook_menu_alter().
 */
function drua_profile_menu_alter(&$items) {
  $items['user/%user_category/edit']['access arguments'] = array('access administration pages');
  $items['user/%user_category/edit']['access callback'] = 'user_access';
  $items['user/reset/%/%/%']['page arguments'] = array('drua_profile_user_pass_reset', 2, 3, 4);
}

/**
 *  Show tabs edit password and edit email only in current user profile.
 */
function drua_profile_tab() {
  global $user;

  return ($user->uid == arg(1)) ? TRUE : FALSE;
}

/**
 * Implementation of hook_block().
 */
function drua_profile_block($op = 'list', $delta = 0, $edit = array()) {
  global $user;
  switch ($op) {
    case 'list':
      return array(
        'profile_about' => array('info' => t('Profile: About')),
        'profile_contacts' => array('info' => t('Profile: Contacts')),
        'profile_avatar' => array('info' => t('Profile: Avatar')),
        'profile_drupal' => array('info' => t('Profile: Drupal planet')),
      	'profile_activity' => array('info' => t('Profile: Drupal activity')),
        'profile_group' => array('info' => t('Profile: User groups')),
        'profile_bookmarks' => array('info' => t('Profile: User bookmarks')),
        'profile_change_avatar' => array('info' => t('Profile: Change avatar')),
        'idevels_blockfooter' => array('info' => t('Footer: Block with all information.')),
        'last_comments' => array('info' => t('Last comments')),
        'top_cities_by_events' => array('info' => t('Top cities by events')),
        'count_users_who_will_go_to_event' => array('info' => t('Count users who will go to event')),
        'notification_block' => array('info' => t('Notification about development instruction')),
        'og_most_popular_groups' => array('info' => t('Most popular group')),
      );

    case 'view':
      if (arg(0) == 'user' && arg(2) != 'edit') {
        $account = user_load(arg(1));
      }
      else {
        $account = FALSE;
      }
      switch ($delta) {
        case 'profile_about':
          if ($account) {
            $user_fields = _drua_profile_fields_load($account->uid, array('about' => '', ));
            if ($user_fields['about'] != '' || $user->uid == $account->uid) {
              $link = '<p class="empty-icon"><a href="'. url('user/'. $user->uid .'/edit') .'" class="icon-no-about">'.
                t('Add information about yourself') .'</a></p>';
              return array(
                'subject' => t('About me'),
                'content' => theme('drua_block_about', $user_fields['about'], $link),
              );
            }
          }
          break;
        case 'notification_block':
          if (isset($_COOKIE['DuNotificationInstruction'])) {
            return;
          }
          return array(
            'subject' => '',
            'content' => notification_instruction_block_items(),
          );
          break;
        case 'profile_contacts':
          if (arg(0) == 'node') {
            $node = node_load(array('nid' => arg(1)));
            $account = user_load($node->uid);
          }
          if (!$account || !$account->uid) {
            return;
          }
          
          $user_fields = _drua_profile_fields_load($account->uid, array(
            'country' => '',
            'country_name' => '',
            'city' => '',
            'skype' => '',
            'jabber' => '',
            'icq' => '',
            'show_email' => '',
            'phone' => '',
            'twitter' => '',
            'linkedin' => '',
            'email' => $account->mail,
          ));
          
          
          if (!$user_fields['show_email']) {
            unset($user_fields['email']);
          }
          unset($user_fields['show_email']);

          if ($user_fields['country'] == ''
              || $user_fields['country_name'] == '' || $user_fields['city'] == '') {
            unset($user_fields['city']);
          }
          else {
            $user_fields['city'] = array(
              'value' => $user_fields['country_name'] .', '. $user_fields['city'],
              'class' => 'field-flag field-flag-'. $user_fields['country'],
              'style' => 'background: transparent url('. base_path() .
                drupal_get_path('theme', 'drua') .'/images/flags/' . $user_fields['country'] . '.png) 0 0 no-repeat;',
            );
          }
          unset($user_fields['country']);
          unset($user_fields['country_name']);
          if ((!is_array($user_fields) || !count($user_fields)) && $user->uid != $account->uid) {
            return;
          }

          if ((is_array($user_fields) && count($user_fields)) || $user->uid == $account->uid) {
            $link = '<p class="empty-icon"><a href="'. url('user/'. $user->uid .'/edit')
              .'" class="icon-no-about">'. t('Add Contacts') .'</a></p>';
            return array(
              'subject' => t('Contacts'),
              'content' => theme('drua_block_contacts', $user_fields, $link),
            );
          }
          break;
          
        case 'profile_avatar':
          if (arg(0) == 'node') {
            $node = node_load(array('nid' => arg(1)));
            $account = user_load($node->uid);
          }
          if (!$account || !$account->uid) {
            return;
            //TODO guest
            
            $user_data = array(
              'uid' => 0,
              'status' => 0,
              'avatar' => theme('drua_block_avatar', '', FALSE),
              'medals' => array(
                'drup' => 0,
                'doc' => 0,
                'dev' => 0,
                'sup' => 0,
                'tran' => 0,
              ),
              'top' => 0,
              'karma' => 0,
              'change_karma' => 0,
            );
          }
          else {
            $user_fields = _drua_profile_fields_load($account->uid, array('avatar' => '', ));
            
            //TODO fix load data (karma, medals)

            $user_data = array(
              'uid' => $account->uid,
              'status' => (time() - $account->access) < variable_get('user_block_seconds_online', 900),
              'avatar' => theme('drua_block_avatar', $user_fields['avatar'], $user->uid == $account->uid),
              'medals' => array(
                'drup' => 1,
                'doc' => 1,
                'dev' => 1,
                'sup' => 1,
                'tran' => 1,
              ),
              'top' => 2,
              //'karma' => user_karma_user_karma($account->uid),

              'change_karma' => ($user->uid && $user->uid != $account->uid ? 1 : 0),
            );
          }
//          dsm($account);
          return array(
            'subject' => t('Avatar'),
            'content' => theme('drua_block_avatar_block', $user_data),
          );
          break;
          
        case 'profile_drupal':
          if ($account) {
            $user_fields = _drua_profile_fields_load($account->uid, array('drupal_parser' => '', ));
            if (isset($user_fields['drupal_parser']['drupal.ru']['track']) ||
                isset($user_fields['drupal_parser']['drupal.org']['track'])) {
              return array(
                'subject' => t('Drupal planet'),
                'content' => theme('drua_block_drupal_active', $user_fields),
              );
            }
          }
          break;

          case 'profile_activity':
            if ($account) {
              $view = views_get_view('profile_activity');
              $view->set_display('block_1');
              $view->set_arguments(array($account->uid));
              $output = $view->render();
              if (!count($view->result)) {
                $output = '';
              }

              if (empty($output) && $user->uid == $account->uid) {
                $output = t('Your public activity on display in this block.
                When you write articles, comment on materials, joining groups or simply
                add material to your bookmarks, your friends can keep up to date here.');
              }
              if (!empty($output)) {
                $title = '<h3 class="pane-title">'. t('Recent activities')
                  .' <span class="title-data">'. format_interval(time() - $account->created) . t(' on the site')
                  .'</span></h3>';
                return array(
                  'subject' => check_plain($view->build_info['title']),
                  'content' => $title . $output,
                );
              }
            }
            break;

          case 'profile_group':
            if ($account) {
              $view = views_get_view('profile_group');
              $view->set_display('block_1');
              $view->set_arguments(array($account->uid));
              $output = $view->render();
              if (!count($view->result)) {
                $output = '';
              }

              if (empty($output) && $user->uid == $account->uid) {
                $output = '<div class="empty-block-group">
  <p class="empty-text">'. t('Place of communication and collaboration of developers, translators and users.') .'</p>
  <p class="empty-icon"><a href="/og" class="icon-no-group" alt="group list">'. t('View list of groups') .'</a></p>
</div>';
              }
              if (!empty($output)) {
                return array(
                  'subject' => check_plain($view->build_info['title']),
                  'content' => $output,
                );
              }
            }
            break;

          case 'profile_bookmarks':
            if ($account) {
              $view = views_get_view('profile_bookmarks');
              $view->set_display('block_1');
              $view->set_arguments(array($account->uid));
              $output = $view->render();
              if (!count($view->result)) {
                $output = '';
              }

              if (empty($output) && $user->uid == $account->uid) {
                $output = t('Bookmarks help to return valuable materials later. To add material to bookmark, click the star in his signature.');
              }
              if (!empty($output)) {
                return array(
                  'subject' => check_plain($view->build_info['title']),
                  'content' => $output,
                );
              }
            }
            break;
        case 'profile_change_avatar':
          if (arg(0) == 'user' && arg(2) == 'edit') {
            return array(
              'subject' => t('Photo'),
              'content' => drupal_get_form('avatar_profile_form'),
            );
          }

          break;
        case 'idevels_blockfooter':
          $count = db_result(db_query("SELECT COUNT(uid) FROM {users} u WHERE u.status = 1"));
          $fb = l('facebook', 'https://www.facebook.com/groups/104220905217', array(
            'attributes' => array(
              'rel'    => 'nofollow',
              'target' => '_blank'
            )
          ));
          $vk = l('vkontakte', 'https://vk.com/drupalua', array(
            'attributes' => array(
              'rel'    => 'nofollow',
              'target' => '_blank'
            )
          ));
          $tw = l('twitter', 'https://twitter.com/drupalua', array(
            'attributes' => array(
              'rel'    => 'nofollow',
              'target' => '_blank'
            )
          ));
          // Custom plural_format
          $list = substr($count, -1);
          switch ($list) {
            case '1':
              $link_title = substr($count, 0, -1) . t('1 professionals');
              break;
            case '2':
              $link_title = substr($count, 0, -1) . t('2 professionals');
              break;
            case '3':
            case '4':
              $link_title = substr($count, 0, -1) . t(substr($count, -1) . ' professionals');
              break;
            default:
              $link_title = t('!count professionals', array('!count' => $count));
              break;
          }
          if ($count == '1') {
            $link_title = t('!count professional', array('!count' => $count));
          }
          $output = '<div class="lc"><div class="copyright">' . t('© 2010—2014 ') . l('Drupal.ua', 'http://www.drupal.ua') . '</div>
                     <div class="count">' . t('Our ') . l($link_title, 'users-lists') . '</div></div>';
          /*$output = '<div class="lc"><div class="copyright">' . t('© 2010—2014 ') . l('Drupal.ua', 'http://www.drupal.ua'). t(' is supported by ') . l('InternetDevels', 'http://internetdevels.com') . t(' and group of volunteers.') . '</div>
                     <div class="count">' . t('Our ') . l($link_title, 'users-lists') . '</div></div>';*/
          $output .= '<div class="mc"><div class="social">
                      <span class="we-in-soc">' . t('We are in social networks:') . '</span><span class="fb">' . $fb . '</span><span class="vk">' . $vk . '</span><span class="tw">' . $tw . '</span></div>
                      <div class="work">' . l('Drupal.ua', 'http://www.drupal.ua'). t(' is supported by ') . l('InternetDevels', 'http://internetdevels.com') . t(' and group of volunteers.') . '</div></div>';
          $output .= '<div class="rc"><div class="contacts">' . l(t('Contacts'), 'contacts') . '</div>
                      <div class="mail">' . t('Write to us ') . l(t('support@drupal.ua'), 'mailto:support@drupal.ua', array(
              'absolute'   => TRUE,
              'attributes' => array(
                'rel'    => 'nofollow',
                'target' => '_blank'
              )
            )) . '</div></div>';

          return array(
            'title'   => '',
            'content' => $output,
          );
          break;
        case 'last_comments':
          return array(
            'title' => t('Last comments'),
            'content' => _drua_profile_last_comments(),
          );
          break;
        case 'top_cities_by_events':
          return array(
            'title' => t('Cities'),
            'content' => _drua_profile_top_cities_by_events(),
          );
          break;
        case 'count_users_who_will_go_to_event':
          return array(
            'title' => t('Count users who will go to event'),
            'content' => _drua_profile_count_users_who_will_go_to_event(),
          );
          break;
        case 'og_most_popular_groups':
          return array(
            'content' => _drua_profile_og_most_popular_groups(),
          );
          break;
      }
      break;
    case 'configure':
      if ($delta == 'notification_block') {
        $form['link'] = array(
          '#type' => 'textarea',
          '#title' => t('Body'),
          '#default_value' => variable_get('notification_instruction_block_items', 'notification_block'),
          '#required' => TRUE,
        );
        return $form;
      }
      break;
    case 'save':
      if ($delta == 'notification_block') {
        variable_set('notification_instruction_block_items', $edit['link']);
        break;
      }
  }
}

function avatar_profile_form () {
  $form = array();
  $form['#attributes']['enctype'] = 'multipart/form-data';
  $form['#validate'][] = 'avatar_profile_form_validate';
  $form['#submit'][] = 'avatar_profile_form_submit';
  $node = node_load(array(
    'uid'  => arg(1),
    'type' => 'profile',
  ));
  if ($node->field_image[0]) {
    $form['image'] = array(
      '#value'  => theme_imagecache('100x100', $node->field_image[0]['filepath']),
      '#prefix' => '<div class="image">',
      '#suffix' => '</div>',
    );
    $form['link'] = array(
      '#value'  => l(t('Change image'), 'javascript:', array(
        'external'   => TRUE,
        'attributes' => array('id' => 'image-link')
      )),
      '#suffix' => '<div class="description">' . t('Transform into a square 100×100') . '</div>',
    );
  }
  else {
    $form['link'] = array(
      '#value'  => l(t('Add image'), 'javascript:', array(
        'external'   => TRUE,
        'attributes' => array('id' => 'image-link')
      )),
      '#suffix' => '<div class="description">' . t('Transform into a square 100×100') . '</div>',
    );
  }
  $form['file'] = array(
    '#type'  => 'file',
    '#title' => '',
  );
  $form['submit'] = array(
    '#type'  => 'submit',
    '#value' => t('Upload'),
  );

  return $form;
}

/**
 * Validate inputted file.
 */
function avatar_profile_form_validate($form, &$form_state) {
    // Allowed extensions
  $ext_post = array('image/png', 'image/gif', 'image/jpg', 'image/jpeg');
  $ext = 'png gif jpg jpeg';
  if (!in_array($_FILES['files']['type']['file'], $ext_post)) {
    form_set_error('file', t('Upload image file (!ext).', array('!ext' => $ext)));

    return FALSE;
  }
  $validators = array(
    'file_validate_extensions' => array($ext),
  );
  $dir = file_directory_path();
  $dir .= '/imagefield_thumbs/images/avatars';
  if ($file = file_save_upload('file', $validators, $dir)) {
    $form_state['values']['file'] = $file;
  }
  else {
    form_set_error('file', t('File was not upload.'));
  }
}

/**
 * Saving file after success validation.
 */
function avatar_profile_form_submit($form, &$form_state) {
  $node = node_load(array(
    'uid' => arg(1),
    'type' => 'profile',
  ));
  $img = (object)field_file_load($node->field_image[0]);
  field_file_delete($img);
  $file = $form_state['values']['file'];
  $file->status = FILE_STATUS_PERMANENT;
  if (!$node) {
    global $user;

    $node = new stdClass();
    $node->type = 'profile';
    $node->status = 1;
    $node->uid = $user->uid;
    $widget_settings = db_result(db_query("SELECT widget_settings FROM content_node_field_instance WHERE field_name = 'field_birthday'"));
    $data = unserialize($widget_settings);
    $node->field_birthday[0]['value'] = $data['default_value_code'];
    $widget_settings = db_result(db_query("SELECT widget_settings FROM content_node_field_instance WHERE field_name = 'field_gender'"));
    $data = unserialize($widget_settings);
    $node->field_gender[0]['value'] = $data['default_value'][0]['value'];
  }
  $node->field_image[0]['fid'] = $file->fid;
  node_save($node);
  drupal_set_message(t('Photo changed.'));
}

/**
 *  Implements hook_form_alter().
 */
function drua_profile_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'profile_node_form') {
    $form['buttons']['submit']['#submit'][] = 'drua_profile_form_profile_submit';
    $form['#pre_render'][] = 'drua_profile_form_prerender';
    $form['field_image']['#type'] = 'hidden';
    unset($form['language']);
    $form['buttons']['cancel'] = array(
      '#value'  => l(t('Cancel'), 'user'),
      '#access' => TRUE,
      '#weight' => 9,
      '#prefix' => '<div class="cancel-button">',
      '#suffix' => '</div>',
    );

  }
  if ($form_id == 'user_admin_settings') {
    $defaults = variable_get('new_email_message', array());
    $email_token_help = t('Available variables are:') . ' !username, !site, !password, !uri, !uri_brief, !mailto, !date, !login_uri, !edit_uri, !login_url., !new_email_link';
    $form['email']['new_email_message'] = array(
      '#type'        => 'fieldset',
      '#title'       => t('New email message send'),
      '#collapsible' => TRUE,
      '#collapsed'   => TRUE,
      '#tree'        => TRUE,
      '#description' => t('Customize new email confirmation messages.') . ' ' . $email_token_help,
    );
    $form['email']['new_email_message']['new_email_subject'] = array(
      '#type'          => 'textfield',
      '#title'         => t('Subject'),
      '#default_value' => isset($defaults['new_email_subject']) ? $defaults['new_email_subject'] : '',
      '#description'   => '',
    );
    $form['email']['new_email_message']['new_email_message_body'] = array(
      '#type'          => 'textarea',
      '#title'         => t('Text'),
      '#default_value' => isset($defaults['new_email_message_body']) ? $defaults['new_email_message_body'] : '',
    );
  }
  if ($form_id == 'user_profile_form') {
    if (isset($form['subscriptions'])) {
      unset($form['subscriptions']['#description']);
    }
  }
}

/**
 *  Replace default submit message for content type Profile.
 */
function drua_profile_form_profile_submit ($form, $form_state) {
  $messages = drupal_get_messages();
  drupal_set_message(t('Profile <em>!name</em> was updated', array('!name' => $form_state['node']['name'])));

}

/**
 *  Prerender function for form user profile edit.
 */
function drua_profile_form_prerender($form) {
  // Make gender field options translatable.
  $genders = array_keys($form['group_personal']['field_gender']['value']['#options']);
  $form['group_personal']['field_gender']['value'][$genders[0]]['#title'] = t('male');
  $form['group_personal']['field_gender']['value'][$genders[1]]['#title'] = t('female');

  return $form;
}
/**
 *  Display form for change user email.
 */
function drua_profile_change_email() {
  global $user;

  drupal_set_title(t('Email'));
  $form = array();
  $form['#validate'][] = 'drua_profile_change_email_validate';
  $form['#submit'][] = 'drua_profile_change_email_submit';
  $form['change_email'] = array(
    '#value' => '<div class="sub-header">' . t('Edit email') . '</div>',
  );
  if ($user->mail) {
    $form['current_email'] = array(
      '#value' => t('Acting-mail - !email', array('!email' => $user->mail)),
    );
  }
  $form['new_email'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Email'),
    '#description'   => t('We will send a confirmation letter'),
    '#default_value' => $user->mail,
  );
  $form['submit'] = array(
    '#type'  => 'submit',
    '#value' => t('Save'),
  );

  return $form;
}

/**
 *  Validate email.
 */
function drua_profile_change_email_validate($form, $form_state) {
  global $user;

  $email = $form_state['values']['new_email'];
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    form_set_error('new_email', t('Enter valid email'));
  }
  if($email == $user->mail) {
    form_set_error('new_email', t('Enter new email'));
  }
}

/**
 *  Change user email.
 */
function drua_profile_change_email_submit($form, $form_state) {
  global $user, $base_url, $language;

  $account = user_load($user->uid);
  $tokens = user_mail_tokens($account, $language);
  $email = $form_state['values']['new_email'];
  $hash_email = substr(md5($user->uid), -7);
  $data = array();
  $data['email_confirmation'] = $hash_email;
  $data['new_email'] = $email;
  user_save($account, $data);
  $vars = variable_get('new_email_message', array());
  if ($vars) {
    $text = $base_url . '/user/' . $account->uid . '/mail/' . $hash_email;
    $link = l($text, 'user/' . $account->uid . '/mail/' . $hash_email, array('absolute' => TRUE));
    $tokens['!new_email_link'] = $link;
    $params['subject'] = strtr($vars['new_email_subject'], $tokens);
    $params['body'] = strtr($vars['new_email_message_body'], $tokens);
    $message = array(
      'to'      => $email,
      'subject' => $params['subject'],
      'body'    => $params['body'],
      'headers' => array(),
    );
    if (drupal_mail_send($message)) {
      drupal_set_message(t('Confirmation link have send to you new email'));
    };
  }
}

/**
 *  Display form for change user password.
 */
function drua_profile_change_password() {
  include_once drupal_get_path('module', 'user') . '/user.pages.inc';
  $form = drupal_retrieve_form('user_profile_form');
  drupal_set_title(t('Password'));
  unset($form['theme_select']);
  unset($form['nodewords']);
  unset($form['htmlmail']);
  unset($form['heartbeat_activity_settings_select']);
  unset($form['comment_notify_settings']);
  unset($form['mimemail']);
  unset($form['locale']);
  unset($form['current_id']);
  unset($form['legal']);
  unset($form['language_value']);
  unset($form['picture']);
  unset($form['revision_id']);
  unset($form['timezone']);
  unset($form['masquerade']);
  unset($form['account']);
  unset($form['delete']);
  $form['change_password'] = array(
    '#value' => '<div class="sub-header">' . t('Change password') . '</div>',
    '#weight'=> -10,
  );
  $form['#validate'] = array('drua_profile_change_password_validate');
  $form['#submit'][] = 'drua_profile_change_password_submit';
  $form['pass'] = array(
    '#type'     => 'password_confirm',
    '#required' => TRUE,
  );

  return $form;
}

/**
 *  Validate password.
 */
function drua_profile_change_password_validate($form, $form_state) {
  $new_pass = $form_state['clicked_button']['#post']['pass']['pass1'];
  $new_pass_conf = $form_state['clicked_button']['#post']['pass']['pass2'];
  if (!$new_pass || !$new_pass_conf) {
    form_set_error('pass', t('Insert new passwords.'));
  }
  if ($new_pass != $new_pass_conf) {
    form_set_error('pass', t('The specified passwords do not match.'));
  }
}

/**
 *  Change user passsword.
 */
function drua_profile_change_password_submit($form, $form_state) {
  global $user;

  $account = user_load($user->uid);
  if (user_save($account, array('pass' => $form_state['values']['pass']))) {
    drupal_set_message(t('Password changed'));
  };
}

/**
 *  Check and set new email.
 */
function drua_profile_checknewmail() {
  $arg = arg();
  if ($arg[3]) {
    $user = user_load($arg[1]);
    $data = unserialize($user->data);
    if (isset($data['email_confirmation']) && isset($data['new_email'])) {
      if ($data['email_confirmation'] == $arg[3]) {
        $data['mail'] = $data['new_email'];
        $data['email_confirmation'] = NULL;
        $data['new_email'] = NULL;
        user_save($user, $data);
        drupal_set_message(t('Email successfully changed to !email', array('!email' => $data['mail'])));
      }
    }
    drupal_goto('user/' . $user->uid);
  }
  drupal_goto('/');
}

function drua_profile_user_pass_reset(&$form_state, $uid, $timestamp, $hashed_pass, $action = NULL) {
  global $user;

  // Check if the user is already logged in. The back button is often the culprit here.
  if ($user->uid) {
    drupal_set_message(t('You have already used this one-time login link. It is not necessary to use this link to login anymore. You are already logged in.'));
    drupal_goto();
  }
  else {
    // Time out, in seconds, until login URL expires. 24 hours = 86400 seconds.
    $timeout = 86400;
    $current = time();
    // Some redundant checks for extra security ?
    if ($timestamp < $current && $account = user_load(array('uid' => $uid, 'status' => 1)) ) {
      // Deny one-time login to blocked accounts.
      if (drupal_is_denied('user', $account->name) || drupal_is_denied('mail', $account->mail)) {
        drupal_set_message(t('You have tried to use a one-time login for an account which has been blocked.'), 'error');
        drupal_goto();
      }

      // No time out for first time login.
      if ($account->login && $current - $timestamp > $timeout) {
        drupal_set_message(t('You have tried to use a one-time login link that has expired. Please request a new one using the form below.'));
        drupal_goto('user/password');
      }
      else if ($account->uid && $timestamp > $account->login && $timestamp < $current && $hashed_pass == user_pass_rehash($account->pass, $timestamp, $account->login)) {
        // First stage is a confirmation form, then login
        if ($action == 'login') {
          watchdog('user', 'User %name used one-time login link at time %timestamp.', array('%name' => $account->name, '%timestamp' => $timestamp));
          // Set the new user.
          $user = $account;
          // user_authenticate_finalize() also updates the login timestamp of the
          // user, which invalidates further use of the one-time login link.
          user_authenticate_finalize($form_state['values']);
          drupal_set_message(t('You have just used your one-time login link. It is no longer necessary to use this link to login. Please change your password.'));
          drupal_goto('user/'. $user->uid .'/edit/password');
        }
        else {
          $form['message'] = array('#value' => t('<p>This is a one-time login for %user_name and will expire on %expiration_date.</p><p>Click on this button to login to the site and change your password.</p>', array('%user_name' => $account->name, '%expiration_date' => format_date($timestamp + $timeout))));
          $form['help'] = array('#value' => '<p>'. t('This login can be used only once.') .'</p>');
          $form['submit'] = array('#type' => 'submit', '#value' => t('Log in'));
          $form['#action'] = url("user/reset/$uid/$timestamp/$hashed_pass/login");
          return $form;
        }
      }
      else {
        drupal_set_message(t('You have tried to use a one-time login link which has either been used or is no longer valid. Please request a new one using the form below.'));
        drupal_goto('user/password');
      }
    }
    else {
      // Deny access, no more clues.
      // Everything will be in the watchdog's URL for the administrator to check.
      drupal_access_denied();
    }
  }
}

/**
 * Return a themed block.
 * @return
 *  A themed HTML string representing the last_comments block.
 */
function _drua_profile_last_comments() {
  $result = db_query(
    'SELECT `comments`.`timestamp` , `node`.`title` , `node_comment_statistics`.`comment_count` , `comments`.`cid` , `node`.`nid` 
    FROM (SELECT * FROM `comments` ORDER BY `comments`.`timestamp` DESC) `comments`
    INNER JOIN `node` ON `comments`.`nid` = `node`.`nid` 
    INNER JOIN `node_comment_statistics` ON `node`.`nid` = `node_comment_statistics`.`nid` 
    WHERE `node`.`status` =1
    GROUP BY `node`.`nid`
    ORDER BY `comments`.`timestamp` DESC
    LIMIT 0 , 7'
  );
  while ($row = db_fetch_array($result)) {
    if (function_exists('ua_month_perfecty')) {
      $time = ua_month_perfecty(reset(explode(',', $row['timestamp'])));
    }
    else {
      $time = format_date(reset(explode(',', $row['timestamp'])), 'custom', 'd F, g:i');
    }
    $title = reset(explode(',', $row['title']));
    $comment_count = reset(explode(',', $row['comment_count']));
    $cid = reset(explode(',', $row['cid']));
    $path_to_node = '/' . drupal_get_path_alias('node/' . reset(explode(',', $row['nid'])));
    $path_to_comment = $path_to_node . '#comment-' . $cid;
    $output[] = "<div class='views-row'><div class='views-field-timestamp'><span class='field-content'>$time</span></div><div class='views-field-subject'><span class='field-content'><a href={$path_to_comment}>$title</a></span></div><div class='views-field-title-1'><span class='field-content'><a href={$path_to_node}>$comment_count</a></span></div></div>";
  }
  $output = '<div class="pane-group-comments-panel-pane-2">' . implode($output) . '<div class="view-footer"><p><a href="/userstracker" rel="nofollow">Всі коментарі</a></p></div>' .'</div>';
    return $output;
}

/**
 * Return a themed block.
 * @return
 *  A themed HTML string representing the og_most_popular_groups block.
 */
function _drua_profile_og_most_popular_groups() {
  $result = db_query("SELECT node.nid AS nid,term_data.tid AS term_data_tid,term_data.name AS term_data_name,term_data.vid AS term_data_vid, node.title AS node_title, node.language AS node_language,COUNT(term_data.name) AS post_count FROM node node  LEFT JOIN og og ON node.nid = og.nid LEFT JOIN term_node term_node ON node.vid = term_node.vid LEFT JOIN term_data term_data ON term_node.tid = term_data.tid WHERE (node.status = 1) AND (og.og_directory <> 0) AND (node.type in ('group')) GROUP BY term_data_name ORDER BY term_data_name ASC");
  $CountAll=0;
  while ($row = db_fetch_array($result)) {
    $url = 'taxonomy/term/' . $row['term_data_tid'];
    $alias = drupal_get_path_alias($url, $row['node_language']);
    if (!preg_match('/tegi*/', $alias)) {
      $items[] = '<span class="most-popular-groups">' . l($row['term_data_name'] . ' (' . $row['post_count'] . ') ', $alias) . '</span>';
      $CountAll+=$row['post_count'];
    }
  }
  $output = '<h3 class="all-most-popular-groups"><a href="og/">' . t('All group') . ' ('.$CountAll.')</a></h3>';
  $output .= implode($items);
  return $output;
}

function _drua_profile_top_cities_by_events() {
  $result = db_query(
    'SELECT  `term_data`.`name`
    FROM  `content_type_events` 
    INNER JOIN  `term_data` ON  `content_type_events`.`field_city_value` =  `term_data`.`tid` 
    GROUP BY  `field_city_value` 
    ORDER BY COUNT(  `field_city_value` ) DESC 
    LIMIT 0 , 10'
  );
  while ($row = db_fetch_array($result)) {
    $city = reset(explode(',', $row['name']));
    $cities[] = "<div class='views-row'><div class='views-field-name'><span class='field-content'><a href='/events?city={$row['name']}'>{$city}</a></span></div></div>";
  }
  return implode($cities);
}

function _drua_profile_count_users_who_will_go_to_event() {
  $result = db_query('SELECT COUNT(*) FROM `content_type_user_event_application` WHERE `field_event_nid_value` = %s', (string) arg(1));
  $count = db_fetch_array($result);
  return $count['COUNT(*)'];
}

/**
 * Load the field values for the Content_profile.
 * @param $uid
 * 	ID user.
 * @param $fields
 * 	array of fields.
 */
function _drua_profile_fields_load($uid, $fields) {
  static $field_social;
  if (!$uid || !is_array($fields) || !count($fields)
      || !($node = content_profile_load('profile', $uid))) {
    return FALSE;
  }

  if (!isset($field_social)) {
    $field_social = explode("\n", $node->field_social[0]['value']);
  }

  foreach ($fields as $key => $value) {
    switch ($key) {
      case 'field_bio':
      case 'about':
        $fields[$key] = check_markup($node->field_bio[0]['value'], $node->field_bio[0]['format']);
        break;
        
      case 'field_skype':
      case 'skype':
        $fields[$key] = check_plain($node->field_skype[0]['value']);
        break;
        
      case 'field_jabber':
      case 'jabber':
        $fields[$key] = check_plain($node->field_jabber[0]['value']);
        break;
        
      case 'field_icq':
      case 'icq':
        $fields[$key] = check_plain($node->field_icq[0]['value']);
        break;
        
      case 'field_show_email':
      case 'show_email':
        $fields[$key] = $node->field_show_email[0]['value'];
        break;
        
      case 'field_phone':
      case 'phone':
        $fields[$key] = check_plain($node->field_phone[0]['value']);
        break;
      
      case 'country':
      case 'country_name':
      case 'city':
      case 'street':
      case 'postal_code':
        $fields[$key] = $node->field_location[0][$key];
        break;
        
      case 'twitter':
        if (is_array($field_social) && count($field_social)) {
          foreach ($field_social as $social) {
            if (($pos = strpos($social, 'twitter.com/')) !== FALSE) {
              $link = substr($social, $pos + 12);
              $fields[$key] = l('@'. $link, 'http://twitter.com/'. $link);
              break;
            }
          }
        }
        break;
        
      case 'linkedin':
        if (is_array($field_social) && count($field_social)) {
          foreach ($field_social as $social) {
            if (($pos = strpos($social, 'linkedin.com/in/')) !== FALSE) {
              $link = substr($social, $pos + 16);
              $fields[$key] = l($link, 'http://linkedin.com/in/'. $link);
              break;
            }
          }
        }
        break;
        
      case 'field_image':
      case 'avatar':
        $fields[$key] = $node->field_image[0];
        break;
        
      case 'drupal_parser':
      case 'field_account':
        $fields[$key] = $node->field_account[0]['value'];
        break;
    }
  }
  return $fields;
}


/**
 * Implementation of hook_token_list().
 */
function drua_profile_token_list($type = 'all') {
  $tokens = array();
  if ($type == 'user') {
    $tokens['user']['user-profile-title'] = t("Title for the user profile.");
  }
  return $tokens;
}


/**
 * Implementation of hook_token_values().
 */
function drua_profile_token_values($type, $account = NULL, $options = array()) {
  if ($type == 'user') {
    if ($profile = content_profile_load('profile', $account->uid)) {
      $user_name = '';
      if (isset($profile->field_first_name[0]['value'])) {
        $user_name = check_plain($profile->field_first_name[0]['value']) .' ';
      }
      if (isset($profile->field_last_name[0]['value'])) {
        $user_name .= check_plain($profile->field_last_name[0]['value']);
      }
      $tokens['user-profile-title'] = $user_name . (!empty($user_name) ? ' aka ' : '') . $account->name;
      return $tokens;
    }
  }
}


/**
 * Theme functions.
 */


/**
 * Return a themed block.
 * @param $items
 *   String from user profile.
 * @return
 *   A themed HTML string representing the About block.
 */
function theme_drua_block_about($str, $link = '') {
  if (empty($str)) {
    $output = '<div class="empty-block-about">
  <p class="empty-text">'.
    t('There may be information about you, such as profession, place of work, interests, hobbies and more. The more information you enter, the more likely to interest potential new contacts.')
    .'</p>'. $link .'</div>';
  }
  else {
    $output = '<div class="full-block-about">'. $str .'</div>';
  }
  return $output;
}


/**
 * Theming block — Contacts.
 */
function theme_drua_block_contacts($fields = NULL, $link = '') {
  if (!is_array($fields) || !count($fields)) {
    $output = '<div class="empty-block-contacts">
  <p class="empty-text">'.
    t('Your contacts open the way for new people and introduce new relationships.')
    .'</p>'. $link .'</div>';
    return $output;
  }
  $output = '<div class="full-block-contact">';
  foreach ($fields as $name => $field) {
    if (!is_array($field)) {
      if (!empty($field)) {
        $output .= '<div class="field-'. $name .'">'. $field .'</div>';
      }
    }
    else {
      $class = (isset($field['class']) && !empty($field['class'])) ? $field['class'] : 'field-'. $name;
      $style = (isset($field['style']) && !empty($field['style'])) ? ' style="'. $field['style'] .'"' : '' ;
      $output .= '<div class="'. $class .'"'. $style .'>'. $field['value'] .'</div>';
    }
  }
  $output .= '</div>';
  return $output;
}


/**
 * Theming block — Avatar.
 */
function theme_drua_block_avatar_block($user_data = NULL) {

  return '
<div class="profile-avatar-wrap-head">
  <div class="wrap-head">
  <div class="g-medal">'. theme('drua_block_medals', $user_data['medals']) .'</div>
  <div class="g-avatar">
    <div class="profile-avatar">'. $user_data['avatar'] .'</div>
    <div class="profile-status">'. theme('drua_block_status', $user_data['status']) .'</div>
  </div>
</div>
<div class="g-rating">
  <!--<div class="profile-top">'. theme('drua_block_top', $user_data['top']) .'</div>-->
  <div class="profile-karma">'. theme('drua_block_karma', $user_data['karma'], $user_data['change_karma']) .'</div>
</div>
</div>
';    // @TODO uncomment top if necessary.
}


/**
 * Theming buser avatar.
 */
function theme_drua_block_avatar($photo = '', $uid_profile = FALSE) {
  global $user;
  $output = '
<div>';
  $path_theme = drupal_get_path('theme', 'idevels');
  if (!is_array($photo) || !isset($photo['filepath']) || !is_file($photo['filepath'])) {
    if ($uid_profile) {
      $output .= '<img src="/'. $path_theme .'/images/icons/avatar-no.png" alt="' .
        check_plain(variable_get('anonymous', t('Anonymous'))) .'" width="160" height="160" />
<div class="avatar_edit_link">'. l(' ', 'user/'. $user->uid .'/edit/profile') .'</div>';
    }
    else {
      $output .= '<img src="/'. $path_theme .'/images/icons/avatar-anonim.png" alt="' .
        check_plain(variable_get('anonymous', t('Anonymous'))) .'" width="160" height="160" />';
    }
  }
  else {
    $output .= theme('imagecache', 'avatar_panel',
      $photo['filepath'], $photo['data']['alt'], $photo['data']['title']);
  }
  return $output .'
</div>';
}


/**
 * Theming user status.
 */
function theme_drua_block_status($status = FALSE) {
  return '<div class="status-'. ($status ? 'online' : 'offline') .'">'.
    ($status ? 'online' : 'offline') .'</div>';  //No t('')
}


/**
 * Theming user top.
 */
function theme_drua_block_top($top_value = NULL) {
  return '
  <div class="profile-top-text">'. t('top') .'</div>
  <div class="profile-top-count">'. ((int)$top_value) .'</div>';
}


/**
 * Theming user medals.
 */
function theme_drua_block_medals($medals = NULL) {
  return '
  <div class="m-drup-'. (isset($medals['drup']) && $medals['drup'] ?'on':'off') .'">&nbsp;</div>
  <div class="m-doc-'. (isset($medals['doc']) && $medals['doc'] ?'on':'off') .'">&nbsp;</div>
  <div class="m-dev-'. (isset($medals['dev']) && $medals['dev'] ?'on':'off') .'">&nbsp;</div>
  <div class="m-sup-'. (isset($medals['sup']) && $medals['sup'] ?'on':'off') .'">&nbsp;</div>
  <div class="m-tran-'. (isset($medals['tran']) && $medals['tran'] ?'on':'off') .'">&nbsp;</div>';
}


/**
 * Theming user karma.
 */
function theme_drua_block_karma($karma_value = NULL, $change_karma = FALSE) {
  if ($change_karma) {
    //TODO correct links

    $plus = '<a class="karma-plus-on" href="#">&nbsp;</a>';
    $minus = '<a class="karma-minus-on" href="#">&nbsp;</a>';
  }
  else {
    $plus = '<a class="karma-plus-off" href="#">&nbsp;</a>';
    $minus = '<a class="karma-minus-off" href="#">&nbsp;</a>';
  }

  return '
  <div class="profile-karma-text">'. t('karma') .'</div>
  <div class="profile-karma-count'. ($change_karma ? ' change_karma' : '') .'">'.
    $minus .'<div>'. ((int)$karma_value) .'</div>'. $plus .'</div>';
}


/**
 * Theming block — Activity.
 */
function theme_drua_block_drupal_active($user_data = NULL) {
  $output = '<div class="drupal_activity">
';
  if (isset($user_data['drupal_parser']['drupal.ru']['track'])) {
    $output .= theme('drua_block_domen_active',
      array('drupal.ru' => $user_data['drupal_parser']['drupal.ru']));
  }
  if (isset($user_data['drupal_parser']['drupal.org']['track'])) {
    $output .= theme('drua_block_domen_active',
      array('drupal.org' => $user_data['drupal_parser']['drupal.org']));
  }
    $org_project = '';
    if (isset($user_data['drupal_parser']['drupal.org']['projects']['translations'])) {
        $org_project .= '<div>';
        foreach ($user_data['drupal_parser']['drupal.org']['projects']['translations'] as $data) {
            $org_project .=
              l($data['title'], $data['href'], $data);
            if ($data != end($user_data['drupal_parser']['drupal.org']['projects']['translations'])) {
                $org_project .= ', ';
            }
        }
        $org_project .= '</div>';
    }
    if (isset($user_data['drupal_parser']['drupal.org']['projects']['modules'])) {
        $org_project .= '<div>';
        foreach ($user_data['drupal_parser']['drupal.org']['projects']['modules'] as $key => $data) {
            $org_project .=
              l($data['title'], $data['href'], $data);
            if ($data != end($user_data['drupal_parser']['drupal.org']['projects']['modules'])) {
                $org_project .= ', ';
            }
        }
        $org_project .= '</div>';
    }
    if (isset($user_data['drupal_parser']['drupal.org']['projects']['themes'])) {
        $org_project .= '<div>';
        foreach ($user_data['drupal_parser']['drupal.org']['projects']['themes'] as $data) {
            $org_project .=
              l($data['title'], $data['href'], $data);
            if ($data != end($user_data['drupal_parser']['drupal.org']['projects']['themes'])) {
                $org_project .= ', ';
            }
        }
        $org_project .= '</div>';
    }
  
  if (!empty($org_project)) {
    $output .= '
  <div class="project_org_wrap">
'. $org_project .'
  </div>';
  }
  return $output .'
</div>';
}


/**
 * Theming block — Drupal Planet.
 */
function theme_drua_block_domen_active($data = NULL) {
  $domen = isset($data['drupal.ru']['track']) ? 'ru' : 'org';
  return '  <div class="domen_wrap">
    <div class="drupal_'. $domen .' text_wrap">
      <h4>Drupal.'. $domen .'</h4>
      <p>'. t('Activity: ') .'<span>'.
    _drupal_account_calculate_activity($data['drupal.'. $domen]['track'])
    .'</span></p>
    </div>
  </div>
';
}


/**
 * @return string
 *   return html block.
 */
function notification_instruction_block_items() {
  $path = request_uri();
  $path = trim($path, '/');
  if ($path == '') {
    $path = 'front';
  }
  $output = l(variable_get('notification_instruction_block_items', 'notification_block'), 'notification-accept');
  $output .= '<span class="notification-close">' . l('x', 'notification-close', array(
        'query' => array(
          'destination' => '' . $path,
        )
      )
    ) . '</span>';
  return $output;
}
