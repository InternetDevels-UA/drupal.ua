<?php

define('NEWSLETTER_INTERESTING_EVENTS_TID', 2710);

/**
 * Implements hook_menu().
 */
function idevels_send_new_events_menu() {
  $items = array();
  $items['account/%user/%'] = array(
    'page callback'   => 'idevels_send_new_events_unsubscribe',
    'page arguments'  => array(1, 2),
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Implements hook_cron().
 * Generates mailing list
 **/
function idevels_send_new_events_cron() {
  $time       = strtotime('-7 day');
  $new_events = db_query("SELECT node.nid AS nid FROM node node WHERE (node.status = '1' AND node.type in ('events')) AND (node.created > %d) ORDER BY node.created DESC", array($time));
  $events     = db_query(
    "SELECT `content_type_events`.`nid`
     FROM  `content_type_events`
     INNER JOIN  `node` ON  `content_type_events`.`nid` =  `node`.`nid`
     WHERE (STR_TO_DATE(`content_type_events`.`field_event_date_value`, '%Y-%m-%%dT%T') > NOW() AND STR_TO_DATE(`content_type_events`.`field_event_date_value`, '%Y-%m-%%dT%T') < NOW()+INTERVAL 7 DAY)
     ORDER BY `field_event_date_value` DESC
     LIMIT 5"
  );
  $questions  = db_query("SELECT node.nid AS nid FROM node node WHERE (node.status = '1' AND  node.type in ('helper')) AND (node.created > %d)", array($time));
  $vacancies  = db_query("SELECT node.nid AS nid FROM node node WHERE (node.status = '1' AND node.type in ('vacancies')) AND (node.created > %d)", array($time));
  $posts      = db_query("SELECT node.nid AS nid FROM node node WHERE (node.status = '1' AND node.type in ('post')) AND (node.created > %d)", array($time));

  if ($events || $new_events || $questions || $vacancies || $post) {
    $template = idevels_send_new_events_make_message($events, $new_events, $questions, $vacancies, $posts);
    $message = array(
      'subject' => t('Interesting events'),
      'headers' => array(
        'Reply-To' => variable_get('idevels_send_new_events_reply', 'support@drupal.ua'),
        'MIME-Version' => '1.0',
        'Content-Type' => 'text/html; charset=UTF-8; format=flowed; delsp=yes',
        'Content-Transfer-Encoding' => '8Bit',
        'From' => variable_get('idevels_send_new_events_from', 'support@drupal.ua'),
        'X-Mailer' => 'Drupal',
        'Sender' => variable_get('idevels_send_new_events_from', 'support@drupal.ua'),
        'mailed-by' => 'drupal.ua',
      ),
    );
    $users = (db_query("SELECT users.uid AS uid, users.name AS user_name,users.mail AS user_mail FROM users
        INNER JOIN node node_users ON users.uid = node_users.uid AND node_users.type = 'profile'
        LEFT JOIN content_type_profile node_users_node_data_field_send_mail_about_new_events ON node_users.vid = node_users_node_data_field_send_mail_about_new_events.vid
        LEFT JOIN simplenews_subscriptions subscription ON users.uid = subscription.uid
        LEFT JOIN simplenews_snid_tid subscription_active ON subscription.snid = subscription_active.snid
        WHERE subscription_active.tid = 2710 AND subscription_active.status = 1"));
    while ($subscriber = db_fetch_array($users)) {
      $output = $template;
      $output = str_replace("@user_name", $subscriber['user_name'], $output);
      $hash = md5($subscriber['uid']);
      $output = str_replace("@unsubscribe_here", '<a href="' . url('account/' . $subscriber['uid'] . '/' . $hash, array('absolute' => TRUE,)) . '" style="color: #21c2f8;text-decoration: none;">' . t('here') . '</a>', $output);
      $message['to'] = $subscriber['user_mail'];
      $message['body'] = $output;
      job_queue_add('drupal_mail_send', 'Send mail for user - ' . $subscriber['user_name'] . ', user email - ' . $subscriber['user_mail'], array($message), '', TRUE);
    }
  }
  return TRUE;
}

/**
 *  Implements hook_theme.
 */
function idevels_send_new_events_theme() {
  $path = drupal_get_path('module', 'idevels_send_new_events') . '/templates';
  return array(
    'idevels_send_new_events_template' => array(
      'template' => 'idevels_send_new_events',
      'arguments' => array('message' => array()),
      'path' => $path,
    ),
  );
}

/**
 * Page for display admin a settings for send email notification about new events.
 */
function idevels_send_new_events_settings_form() {
  $form['#attributes']['enctype'] = "multipart/form-data";
  $form['idevels_send_new_events_settings_form']['reply'] = array(
    '#type' => 'textfield',
    '#title' => t('Mail Reply-To'),
    '#default_value' => variable_get('idevels_send_new_events_reply', variable_get('site_name', '')),
    '#size' => 60,
    '#maxlength' => 120,
    '#required' => TRUE,
  );
  $form['idevels_send_new_events_settings_form']['from'] = array(
    '#type' => 'textfield',
    '#title' => t('Mail From'),
    '#default_value' => variable_get('idevels_send_new_events_from', variable_get('site_name', '')),
    '#size' => 60,
    '#maxlength' => 120,
    '#required' => TRUE,
  );
  $default_image = variable_get('idevels_send_new_events_default_image', '');
  if ($default_image != '') {
    $form['idevels_send_new_events_settings_form']['default_image_preview'] = array(
      '#value' => '<img src="/' . $default_image . '" width="112px" >',
    );
  }
  $form['idevels_send_new_events_settings_form']['default_image'] = array(
    '#type' => 'file',
    '#title' => t('Default image for none logo events'),
    '#size' => 40,
    '#description' => t('Upload a file, allowed extensions: jpg, jpeg, png, gif'),
    '#default_value' => variable_get('idevels_send_new_events_default_image', ''),
    '#upload_location' => 'public://new_event_sender_default_image/',
  );
  $form['idevels_send_new_events_settings_form']['top'] = array(
    '#type' => 'textarea',
    '#title' => t('Header information'),
    '#default_value' => variable_get('idevels_send_new_events_top', "Header information"),
    '#required' => TRUE,
    '#description' => t('You can use token @user_name'),
  );
  $form['idevels_send_new_events_settings_form']['footer_top'] = array(
    '#type' => 'textarea',
    '#title' => t('Fotter top information'),
    '#default_value' => variable_get('idevels_send_new_events_footer_top', "Footer top information"),
    '#required' => TRUE,
  );
  $form['idevels_send_new_events_settings_form']['footer_supported_by'] = array(
    '#type' => 'textarea',
    '#title' => t('Fotter bottom supported by'),
    '#default_value' => variable_get('idevels_send_new_events_footer_supported_by', "Supported by"),
    '#required' => TRUE,
  );
  $form['idevels_send_new_events_settings_form']['footer_bottom'] = array(
    '#type' => 'textarea',
    '#title' => t('Fotter bottom information'),
    '#default_value' => variable_get('idevels_send_new_events_footer_bottom', "Footer bottom information"),
    '#required' => TRUE,
    '#description' => t('You can use token @site_link, @unsubscribe_here'),
  );
  $form['idevels_send_new_events_settings_form']['facebook'] = array(
    '#type' => 'textfield',
    '#title' => t('Facebook link in footer'),
    '#default_value' => variable_get('idevels_send_new_events_facebook', ""),
    '#size' => 60,
    '#maxlength' => 120,
    '#required' => TRUE,
  );
  $form['idevels_send_new_events_settings_form']['vk'] = array(
    '#type' => 'textfield',
    '#title' => t('Vk link in footer'),
    '#default_value' => variable_get('idevels_send_new_events_vk', ""),
    '#size' => 60,
    '#maxlength' => 120,
    '#required' => TRUE,
  );
  $form['idevels_send_new_events_settings_form']['twitter'] = array(
    '#type' => 'textfield',
    '#title' => t('Twitter link in footer'),
    '#default_value' => variable_get('idevels_send_new_events_twitter', ""),
    '#size' => 60,
    '#maxlength' => 120,
    '#required' => TRUE,
  );

  $form['#submit'][] = 'idevels_send_new_events_settings_form_submit';
  $form['#validate'][] = 'idevels_send_new_events_settings_form_validate';
  return system_settings_form($form);
}

/**
 * Submit for idevels_send_new_events_settings_form
 * save all values to variable
 */
function idevels_send_new_events_settings_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  if (isset ($values['reply']) && !empty($values['reply'])) {
    variable_set('idevels_send_new_events_reply', $values['reply']);
  }
  if (isset ($values['from']) && !empty($values['from'])) {
    variable_set('idevels_send_new_events_from', $values['from']);
  }
  if (isset ($values['top']) && !empty($values['top'])) {
    variable_set('idevels_send_new_events_top', $values['top']);
  }
  if (isset ($values['facebook']) && !empty($values['facebook'])) {
    variable_set('idevels_send_new_events_facebook', $values['facebook']);
  }
  if (isset ($values['vk']) && !empty($values['vk'])) {
    variable_set('idevels_send_new_events_vk', $values['vk']);
  }
  if (isset ($values['twitter']) && !empty($values['twitter'])) {
    variable_set('idevels_send_new_events_twitter', $values['twitter']);
  }
  if (isset ($values['footer_top']) && !empty($values['footer_top'])) {
    variable_set('idevels_send_new_events_footer_top', $values['footer_top']);
  }
  if (isset ($values['footer_bottom']) && !empty($values['footer_bottom'])) {
    variable_set('idevels_send_new_events_footer_bottom', $values['footer_bottom']);
  }
  if (isset ($values['footer_supported_by']) && !empty($values['footer_supported_by'])) {
    variable_set('idevels_send_new_events_footer_supported_by', $values['footer_supported_by']);
  }
  if (isset($form_state['storage']['file'])) {
    variable_set('idevels_send_new_events_default_image', $form_state['storage']['file']);
  }
}

/**
 * Validate for idevels_send_new_events_settings_form
 * function for validate 'default_image' field
 */
function idevels_send_new_events_settings_form_validate($form, &$form_state) {
  $field = 'default_image';
  $directory = file_directory_path() . '/new_event_sender_default_image';
  if (file_check_directory($directory, FILE_CREATE_DIRECTORY, $field)) {
    $extensions = array('png', 'gif', 'jpg', 'jpeg');
    if ($file = file_save_upload($field, array(), $directory)) {
      if (!in_array(pathinfo($file->filepath, PATHINFO_EXTENSION), $extensions) OR !in_array(end(explode(".", $file->filename)), $extensions) OR substr($file->filename, -5, 5) == '_.txt') {
        file_delete($file->filepath);
        form_set_error('default_image', t('File extensions not allowed'));
      }
      elseif ($file->filesize > 20000000) {
        file_delete($file->filepath);
        form_set_error('default_image', t("File can't be more than 20Mb"));
      }
      else {
        file_set_status($file, FILE_STATUS_PERMANENT);
        $form_state['storage']['file'] = $file->filepath;
      }
    }
  }
}

/**
 * Function for generate body of email
 * return 'html'
 */
function idevels_send_new_events_make_message($events = '', $new_events = '', $questions = '', $vacancies = '', $posts = '') {
  $time = strtotime('-7 day');
  $headerlogo = url(trim(drupal_get_path('module', 'idevels_send_new_events') . '/img/header_logo.png', '/'), array('absolute' => TRUE,));
  $vk_img = url(trim(drupal_get_path('module', 'idevels_send_new_events') . '/img/vk.png', '/'), array('absolute' => TRUE,));
  $vk_link = variable_get('idevels_send_new_events_vk', "");
  $facebook_img = url(trim(drupal_get_path('module', 'idevels_send_new_events') . '/img/facebook.png', '/'), array('absolute' => TRUE,));
  $facebook_link = variable_get('idevels_send_new_events_facebook', "");
  $twitter_img = url(trim(drupal_get_path('module', 'idevels_send_new_events') . '/img/twitter.png', '/'), array('absolute' => TRUE,));
  $twitter_link = variable_get('idevels_send_new_events_twitter', "");
  $deffaultimage = url(trim(variable_get('idevels_send_new_events_default_image', ''), '/'), array('absolute' => TRUE,));
  $headertext = str_replace("\r\n", "<br>", variable_get('idevels_send_new_events_top', "Header information"));
  $footer_top = variable_get('idevels_send_new_events_footer_top', "Footer top information");
  $footer_bottom = str_replace("\r\n", "<br>", variable_get('idevels_send_new_events_footer_bottom', "Footer bottom information"));
  $footer_bottom = str_replace("@site_link", '<a href="' . url('', array('absolute' => TRUE,)) . '"  style="color: #21c2f8;text-decoration: none;text-transform: lowercase;">' . variable_get('site_name', '') . '</a>', $footer_bottom);
  $footer_supported_by = variable_get('idevels_send_new_events_footer_supported_by', "Supported by");
  $text = array(
    'headerlogo' => $headerlogo,
    'vk_img' => $vk_img,
    'vk_link' => $vk_link,
    'facebook_img' => $facebook_img,
    'facebook_link' => $facebook_link,
    'twitter_img' => $twitter_img,
    'twitter_link' => $twitter_link,
    'deffaultimage' => $deffaultimage,
    'headertext' => $headertext,
    'footer_top' => $footer_top,
    'footer_bottom' => $footer_bottom,
    'footer_supported_by' => $footer_supported_by,
  );

  // Closest events.
  $closest_event_nids = array();
  while ($closest_event = db_fetch_array($events)) {
    $closest_event_nids[] = $closest_event['nid'];
    $node = node_load($closest_event['nid'], NULL, TRUE);
    // Get city name from taxonomy_term.
    $city = taxonomy_get_term($node->field_city[0]['value']);
    $city = (!empty($city->name)) ? $city->name : '';
    $timestamp = strtotime($node->field_event_date[0]['value']);
    $date = date('d/m/Y', $timestamp);
    $image = isset($node->field_events_logo[0]['filepath']) ? url($node->field_events_logo[0]['filepath'], array('absolute' => TRUE)) : $text['deffaultimage'];
    $body = strip_tags($node->body);
    $text['events_label'] = t('Closest events');
    $text['events'][] = array(
      'title' => $node->title,
      'date'  => $date . ' • ' . $city,
      'body'  => views_trim_text(array('max_length' => 200, 'ellipsis' => TRUE, 'word_boundary' => FALSE), $body),
      'readmore_link' => url($node->path, array('absolute' => TRUE)),
      'readmore_text' => t('Learn more'),
      'logo' => $image,
      'register_link' => url($node->path, array('absolute' => TRUE)),
      'register_text' => t('Sign up'),
    );
  }
  // New events.
  while ($new_event = db_fetch_array($new_events)) {
    if (!in_array($new_event['nid'], $closest_event_nids)) {
      $node = node_load($new_event['nid'], NULL, TRUE);
      $timestamp = strtotime($node->field_event_date[0]['value']);
      $date = date('d/m/Y', $timestamp);
      $image = isset($node->field_events_logo[0]['filepath']) ? url($node->field_events_logo[0]['filepath'], array('absolute' => TRUE)) : $text['deffaultimage'];
      $body = strip_tags($node->body);
      $text['new_events_label'] = t('New events');
      $text['all_new_events_label'] = '<a style="color:#fff;text-decoration: none;width: 100%;line-height: 31px;display: block;" href="' . url('events',array('absolute' => TRUE)) . '">' . t('All events') . '</a>';
      $text['new_events'][] = array(
        'title' => $node->title,
        'date'  => $date,
        'body'  => views_trim_text(array('max_length' => 90, 'ellipsis' => TRUE, 'word_boundary' => FALSE), $body),
        'readmore_link' => url($node->path, array('absolute' => TRUE)),
        'readmore_text' => t('Learn more'),
        'logo' => $image,
        'register_link' => url($node->path, array('absolute' => TRUE)),
        'register_text' => t('Sign up'),
      );
    }
  }

  // New questions.
  while ($new_question = db_fetch_array($questions)) {
    $node = node_load($new_question['nid'], NULL, TRUE);
    $body = strip_tags($node->body);
    $text['questions_label'] = t('New questions');
    $text['all_questions_label'] = '<a style="color:#fff;text-decoration: none;width: 100%;line-height: 31px;display: block;" href="' . url('question',array('absolute' => TRUE)) . '">' . t('All questions') . '</a>';
    $text['questions'][] = array(
      'title' => $node->title,
      'body' => views_trim_text(array('max_length' => 200, 'ellipsis' => TRUE, 'word_boundary' => FALSE), $body),
      'readmore_link' => url($node->path, array('absolute' => TRUE)),
      'readmore_text' => t('Learn more'),
    );
  }

  // New vacancies.
  while ($new_vacancy = db_fetch_array($vacancies)) {
    $node = node_load($new_vacancy['nid'], NULL, TRUE);
    $company = !empty($node->field_company[0]['title']) ? $node->field_company[0]['title'] . ' • ' : '';
    // Get city name from taxonomy_term.
    $city = taxonomy_get_term($node->field_cities[0]['value']);
    $city = (!empty($city->name)) ? $city->name : '';
    $body = strip_tags($node->body);
    $text['vacancies_label'] = t('New vacancies');
    $text['all_vacancies_label'] = '<a style="color:#fff;text-decoration: none;width: 100%;line-height: 31px;display: block;" href="' . url('vacancies',array('absolute' => TRUE)) . '">' . t('All vacancies') . '</a>';
    $text['vacancies'][] = array(
      'title' => $node->title,
      'body' => views_trim_text(array('max_length' => 400, 'ellipsis' => TRUE, 'word_boundary' => FALSE), $body),
      'readmore_link' => url($node->path, array('absolute' => TRUE)),
      'readmore_text' => t('Learn more'),
      'city' => $company . $city,
    );
  }

  // New posts.
  while ($new_post = db_fetch_array($posts)) {
    $node = node_load($new_post['nid'], NULL, TRUE);
    $author = user_load($node->uid);
    $author = !empty($author->name) ? $author->name : '';
    $body = strip_tags($node->body);
    $text['posts_label'] = t('New posts');
    $text['all_posts_label'] = '<a style="color:#fff;text-decoration: none;width: 100%;line-height: 31px;display: block;" href="' . url('groups',array('absolute' => TRUE)) . '">' . t('Posts all') . '</a>';
    $text['posts'][] = array(
      'title' => $node->title,
      'body' => views_trim_text(array('max_length' => 200, 'ellipsis' => TRUE, 'word_boundary' => FALSE), $body),
      'readmore_link' => url($node->path, array('absolute' => TRUE)),
      'readmore_text' => t('Learn more'),
      'author' => $author,
    );
  }

  return theme('idevels_send_new_events_template', $text);
}

/**
 * Page callback function for unsubscribe.
 */
function idevels_send_new_events_unsubscribe($account, $hash) {
  if (!empty($account->uid)) {
    $hash_to_check = md5($account->uid);
    if ($hash_to_check == $hash) {
      simplenews_unsubscribe_user($account->mail, NEWSLETTER_INTERESTING_EVENTS_TID, FALSE, 'mass unsubscribe');
      drupal_set_message(t('You have unsubscribed from newsletters about interesting events'));
    }
  }
  drupal_goto();
}
