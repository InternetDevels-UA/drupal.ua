<?php
// $Id: ip2locale.module,v 1.1.2.7 2009/05/03 17:17:07 mrfelton Exp $

/**
 * @file
 * Redirect users to site version based on IP address.
 *
 * This module redirect users to a specific site version
 * based on their IP address. It can use one or more IP lookup
 * modules to translate the users detected IP address into a
 * country code.
 *
 * @author Tom Kirkpatrick (mrfelton), www.kirkdesigns.co.uk
 */

define('IP2LOCALE_FIRST_REQUEST_ONLY', 1);
define('IP2LOCALE_ALL_REQUESTS', 2);

/**
 * Implementation of hook_help().
 */
function ip2locale_help($path, $arg) {
  switch ($path) {
    case 'admin/help#ip2locale':
      $output = '<p>'. t('Drupal is set up fairly well for multilingual sites. However, it does make the assumption that each site version will be in a different language. It is quite feasible however, that there be two versions of a site in the same language. For example, A site which has a UK version, and a version for the Republic of Ireland. Both sites are written in English, but the content varies for each. Drupals multilingual features provide the perfect tools to allow \'translation\' of content from one version of the site to another, but In a setup like this, it may also be desirable to automatically redirect users to a particular version of the site based on their IP address...') .'</p>';
      $output .= '<p>'. t('IP 2 Locale is able to redirect users to a specific site version based on the originating country of their IP address. It can use one or more IP lookup modules to translate the users IP address into a country code. Mappings can then be provided from country code to language code, and these mappings will be used to determine which version of the site to redirect to.', array('@content-help' => url('admin/help/translation'))) .'</p>';
      $output .= '<p>'. t('IP to Locale currently supports IP to Country lookup by one or more of the following modules:') .'</p>';
      $output .= '<ul><li>'. t('<a href="@ip2cc">ip2cc</a>', array('@ip2cc' => 'http://drupal.org/project/ip2cc')) .'</li>';
      $output .= '<li>'. t('<a href="@ip2country">ip2country</a>', array('@ip2country' => 'http://drupal.org/project/ip2country')) .'</li>';
      $output .= '<li>'. t('<a href="@geoip">geoip</a>', array('@geoip' => 'http://drupal.org/project/geoip')) .'</li></ul>';
      return $output;
    case 'admin/settings/ip2locale':
      $output = '<p>'. t("IP 2 Locale settings determine the how and when site redirection will occor. Available redirection modes include:") .'</p>';
      $output .= '<ul><li>'. t('<strong>First request only.</strong> Redirection will happen for the first request only (when a page is requesed directly, or the user comes from a refering site).') .'</li>';
      $output .= '<li>'. t('<strong>All requests.</strong> Redirection will happen on every single page request') .'</li></ul>';
      return $output;
    case 'admin/settings/ip2locale/backends':
      $output = '<p>'. t('This page provides an overview of installed IP to Country lookup backends. IP to Locale currently supports IP to Country lookup by one or more of the following modules:') .'</p>';
      $output .= '<ul><li>'. t('<a href="@ip2cc">ip2cc</a>', array('@ip2cc' => 'http://drupal.org/project/ip2cc')) .'</li>';
      $output .= '<li>'. t('<a href="@ip2country">ip2country</a>', array('@ip2country' => 'http://drupal.org/project/ip2country')) .'</li>';
      $output .= '<li>'. t('<a href="@geoip">geoip</a>', array('@geoip' => 'http://drupal.org/project/geoip')) .'</li></ul>';
      $output .= '<p>'. t('You may use this page to enable/disable installed backends as well as ordering them as you see fit. Backends will be tried in the order listed on this page. If one backend fails to map a users IP address to a country, the next backend in the list is tried.') .'</p>';
      return $output;
  }
}

/**
 * Implementation of hook_menu().
 */
function ip2locale_menu() {
  $items['admin/settings/ip2locale'] = array(
    'title' => 'IP to Locale',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ip2locale_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'ip2locale.admin.inc',
  );
  $items['admin/settings/ip2locale/settings'] = array(
    'title' => 'Settings',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/settings/ip2locale/backends'] = array(
    'title' => 'Backends',
    'description' => 'Manage IP to Country looup backend.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ip2locale_admin_backend_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'ip2locale.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  $items['ip2locale/ajax/toggle_backend/%/%'] = array(
    'title' => 'ajax add',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'ip2locale_ajax_toggle_backend',
    'page arguments' => array(3, 4),
    'type' => MENU_CALLBACK
  );
  $items['ip2locale/backend'] = array(
    'title' => 'IP to Locale backend',
    'page callback' => 'ip2locale_backend_page',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_requirements().
 */
function ip2locale_requirements($phase) {
  $requirements = array();

  // Retrieve the appropriate localisation function name
  $t = get_t();

  $requirements['backend']['title'] = $t('IP to Locale');
  
  // Test for a valid backend
  if (!module_exists('ip2cc') && !module_exists('geoip')) {
    $requirements['backend']['value'] = $t('No IP -> country lookup modules available');
    $requirements['backend']['description'] = $t('There are no ip2country lookup modules installed. Please install one or more supported modules (ip2cc, geoip).');
    $requirements['backend']['severity'] = REQUIREMENT_ERROR;
  }
  else {
    $backends = ip2locale_backend_list('available');
    $requirements['backend']['value'] = $t('IP address lookup is provided by: !backends', array('!backends' => join(', ', $backends)));
    $requirements['backend']['severity'] = REQUIREMENT_OK;
  }
  return $requirements;
}

/**
 * Implementation of hook_theme().
 */
function ip2locale_theme() {
  return array(
    'ip2locale_admin_backend_settings' => array(
      'arguments' => array('form' => NULL),
      'file' => 'ip2locale.admin.inc',
    ),
  );
}

/**
 * Implementation of hook_boot().
 */
function ip2locale_boot() {

  /**
   * If the site is in offline there is little point doing any of this as you might end up redirecting to a 503.
   */
  if (variable_get('site_offline', 0) == 1) return FALSE;
  if (basename($_SERVER['REQUEST_URI']) == 'cron.php') return FALSE;

  if (variable_get('ip2locale_redirect_mode', IP2LOCALE_FIRST_REQUEST_ONLY) == IP2LOCALE_FIRST_REQUEST_ONLY) {
    /**
     * We only want to act if the user comes to the page from an external site/direct hit
     */
    if (strpos($_SERVER['HTTP_REFERER'], $_SERVER['SERVER_NAME'])) return FALSE;
  }
  
  // Load in supporting code.
  // This is needed so that module_load_include can be used (this is used in some of the backends).
  require_once './includes/common.inc'; 
  
  // Attempt to register backends
  drupal_load('module', 'geoip');
  drupal_load('module', 'ip2cc');
  drupal_load('module', 'uc_ip2country');
  
  // Try to get saved locale from cookies.
  if (variable_get('ip2locale_save_locale', TRUE) && $_COOKIE['ip2locale_lc']) {
    $lc = $_COOKIE['ip2locale_lc'];
  }
  else {
    // Get the users language code from their session if it exists
    if ((variable_get('ip2locale_debug', FALSE) && $_GET['ip2locale_debug']) || !$_SESSION['ip2locale_lc']) {
      // Work out the the users language code based on their IP address.
      $ip = ip2locale_ip_address();
      $lc = $_SESSION['ip2locale_lc'] = ip2locale_get_locale($ip);
    }
    else {
      $lc = $_SESSION['ip2locale_lc'];
    }
  }

  /**
   * Couldn't work out the users country so we bail.
   */
  if (!$lc) return FALSE;
  
  drupal_bootstrap(DRUPAL_BOOTSTRAP_PATH); // load in the code required to deal with paths properly
  drupal_bootstrap(DRUPAL_BOOTSTRAP_LANGUAGE); // load in the code required to deal with languages
  
  // get the current language
  global $language;
  
  // Get the Query String (minus the 'q'). If none set, set to NULL
  $query_string = drupal_query_string_encode($_GET, array('q'));
  if (empty($query_string)) {
    $query_string = NULL;
  }

  // Establish the language prefix that should be used, ie. the one that drupal_goto() would use
  $options = array('prefix' => '');
  if (function_exists('language_url_rewrite')) {
    // Note that language_url_rewrite() takes path (by reference) as the first argument but does not use it at all
    $path = $_REQUEST['q'];
    language_url_rewrite($path, $options);
  }
  $prefix = rtrim($options['prefix'], '/');
    
  // Find an alias (if any) for the request
  $alias = drupal_get_path_alias($_GET['q']);
  if ($prefix && $alias) {
    $prefix .= '/';
  }
  
  // redirect the user to a language specific version if
  // 1. the country code maps to an enabled language
  // 2. the country code is not the active language
  // 3. the user has not asked for a specific, prefixed version of a page
  $languages = language_list('enabled');
  
  foreach ($languages[1] as $lang) {
    
    switch (variable_get('language_negotiation', LANGUAGE_NEGOTIATION_NONE)) {
      case LANGUAGE_NEGOTIATION_DOMAIN:
        if (($lc == $lang->language) && ($language->language != $lc) && !$prefix) {
          $redirect = $lang->domain? $lang->domain .'/'. $alias : $alias;
        }
        break;
        
      default:
        if (($lc == $lang->language) && ($language->language != $lc) && !$prefix) {
          $redirect = $lang->prefix? $lang->prefix .'/'. $alias : $alias;
        }
    }
    if ($redirect) {
      if (variable_get('ip2locale_debug', FALSE)) {
        drupal_set_message('IP to Locale debug... Redirecting to: '. $redirect);
      }
      drupal_load('module', 'filter'); // this is needed to use drupal_goto, since it uses url() which requires access to filter_xss_bad_protocol()
      drupal_goto($redirect, $query_string, NULL, 303);
    }
  }
}

/**
 * Implementation of hook_init().
 */
function ip2locale_init() {
  global $language;
  if (variable_get('ip2locale_save_locale', TRUE)) {
    setcookie('ip2locale_lc', $language->language, time() + 60*60*24*30, '/');
  }
}

/**
 * Menu callback for (un)enabling a backend.
 *
 * Used both for the regular callback as well as the JS version.
 */
function ip2locale_backend_page($action, $backend) {
  $js = isset($_REQUEST['has_js']);
  
  $result = _ip2locale_toggle_backend($backend, $action);
  if (!$result) {
    $error = t('You are not allowed to enable or disable this backend.');
  }
  
  // If an error was received, set a message and exit.
  if (isset($error)) {
   /* if ($js) {
      drupal_set_header('Content-Type: text/javascript; charset=utf-8');
      print drupal_to_js(array(
        'status' => FALSE,
        'errorMessage' => $error,
      ));
      exit;
    }
    else {*/
      drupal_set_message($error);
      drupal_access_denied();
      return;
  //  }
  }

  // If successful, return data according to the request type.
 /* if ($js) {
    drupal_set_header('Content-Type: text/javascript; charset=utf-8');
    print drupal_to_js(array(
      'status' => TRUE,
      'new_link' => variable_get('ip2locale_backend_'.$backend.'_enabled', $status)? 'disable' : 'enable',
      'backend_name' => $backend,
    ));
    exit;
  }
  else {*/
    drupal_set_message('Status of '.$backend.' updated.');
    drupal_goto('admin/settings/ip2locale/backends');
 // }
}

function _ip2locale_toggle_backend($backend, $status) {
  $available_backends = ip2locale_backend_list('available');
  $status = $status == 'enable' ? TRUE : FALSE;
  
  if (!$available_backends[$backend]) {
    return array('error' => t('Backend not available'));
  }

  variable_set('ip2locale_backend_'.$backend.'_enabled', $status);
  
  return array(
    'status' => 1,
    'data' => 'enabled',
  );
}

/**
 * Utility function to split user-entered values from new-line seperated
 * text into an array of options.
 *
 * @param $text
 *   Text to be converted into a select option array.
 * @param $flat
 *   Optional. If specified, return the option array and exclude any optgroups.
 */
function _ip2locale_custom_map_options($text, $flat = FALSE) {
  $options = array();
  $rows = array_filter(explode("\n", trim($text)));
  $group = NULL;
  foreach ($rows as $option) {
    $option = trim($option);
    if (preg_match('/^([a-z]{2})\,([a-z]+)$/', $option, $matches)) {
      $cc = strtolower($matches[1]);
      $lc = strtolower($matches[2]);
      $options[$cc] = $lc;
    }
  }
  return $options;
}

/**
 * Get a list of supported backends for IP to Country lookups.
 *
 * @return
 *   An array containing the module names of backends.
 */
function _ip2locale_supported_backends() {
  $backends = array(
    'ip2cc' => 'ip2cc_get_country',
    'uc_ip2country' => 'uc_ip2country_get_country',
    'geoip' => 'geoip_country_code',
  );
  return $backends;
}

/**
 * Get a list of available backends for IP to Country lookups.
 *
 * @return
 *   An array containing the module names of available backends.
 */
function _ip2locale_available_backends() {
  $backends = array();
  $weights = array();
  $supported_backends = _ip2locale_supported_backends();
  foreach ($supported_backends as $module => $function) {
    if (module_exists($module) || function_exists($function)) {
      $backends[$module] = variable_get('ip2locale_'.$module.'_weight', 50);
    }
  }
  return _ip2locale_sort_backends($backends);
}

/**
 * Get a list of enabled backends for IP to Country lookups.
 *
 * @return
 *   An ordered array containing the module names of enables backends.
 */
function _ip2locale_enabled_backends() {
  $backends = array();
  $supported_backends = _ip2locale_supported_backends();
  $available_backends = _ip2locale_available_backends();
  foreach ($available_backends as $module) {
    if (variable_get('ip2locale_backend_'.$module.'_enabled', FALSE)) {
      $backends[$module] = $supported_backends[$module];
    }
  }
  return $backends;
}

function _ip2locale_sort_backends($backends) {
  asort($backends);
  foreach ($backends as $module => $weight) {
    $backends[$module] = $module;
  }
  return $backends;
}

function ip2locale_backend_list($status = 'enabled') {
  switch ($status) {
    case 'supported':
      return _ip2locale_supported_backends();
      
    case 'available':
      return _ip2locale_available_backends();
      
    case 'enabled':
      return _ip2locale_enabled_backends();
  }
} 

/**
 * Get the Locale from the IP address
 *
 * @param string $ip
 *   IP address to convert to a language code.
 * @return
 *   Language code or FALSE if the lookup failed to find a Language code for this IP
 */
function ip2locale_get_locale($ip) {
  $backends = ip2locale_backend_list('enabled');
  foreach($backends as $module => $function) {
    switch ($module) {
      case 'ip2cc':
        $ip2cc = ip2cc_get_country($ip);
        $cc = $ip2cc->country_code;
        break;

      case 'uc_ip2country':
        $cc = uc_ip2country_get_country($ip);
        break;
        
      case 'geoip':
        $cc = geoip_country_code($ip);
        break;
    }
    if ($cc) {
      $cc = strtolower($cc);
      if (variable_get('ip2locale_debug', FALSE)) {
        drupal_set_message('IP to Locale debug... IP mapped to country code: '. $cc .' (by '. $module .')');
      }
      break;
    }
  }
  
  $custom_mappings = _ip2locale_custom_map_options(variable_get('ip2locale_custom_mapping', ''));
  $lc = $custom_mappings[$cc]? $custom_mappings[$cc] : $cc;
  
  if (variable_get('ip2locale_debug', FALSE)) {
    $mapped = $lc? $lc : 'NONE';
    drupal_set_message('IP to Locale debug... Country code mapped to locale: '. $mapped);
  }
  
  return $lc;
}

/**
 * Helper function to get the current ip address
 */
function ip2locale_ip_address() {
  if (variable_get('ip2locale_debug', FALSE) && $_GET['ip2locale_debug']) {
    $ip = $_GET['ip2locale_debug'];
    drupal_set_message('IP to Locale debug... Using IP: '. $ip);
  }
  else {
    $ip = ip_address();
  }
  return $ip;
}